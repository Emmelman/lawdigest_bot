"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram-–±–æ—Ç–∞
"""
import logging
import re
import asyncio
import telegram
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import time, datetime, timedelta
from config.settings import CATEGORIES, BOT_USERNAME, TELEGRAM_CHANNELS
from llm.gemma_model import GemmaLLM
from agents.digester import DigesterAgent
from agents.data_collector import DataCollectorAgent
from agents.analyzer import AnalyzerAgent
from agents.critic import CriticAgent
from utils.text_utils import TextUtils
from telegram_bot.improved_message_handler import improved_message_handler
from telegram_bot.view_digest_helpers import (
    show_full_digest, start_digest_generation, get_category_icon
)
from telegram_bot.period_command import period_command
from telegram_bot.improved_view_digest import (
       view_digest_callback, 
       view_digest_section_callback,
       page_navigation_callback,
       show_full_digest,
       get_category_icon,
       get_short_category_id
   )
from telegram_bot.improved_view_digest import get_short_category_id

logger = logging.getLogger(__name__)

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º
utils = TextUtils()

# –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE, db_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫–æ–º–∞–Ω–¥–µ start
    if context.args and context.args[0].startswith('msg_'):
        try:
            message_id = int(context.args[0].replace('msg_', ''))
            message = db_manager.get_message_by_id(message_id)
            
            if message:
                await update.message.reply_text(
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {message.channel} –æ—Ç {message.date.strftime('%d.%m.%Y')}:\n\n{message.text}"
                )
                return
        except (ValueError, Exception) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ start: {str(e)}")
    
    # –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    await update.message.reply_text(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø—Ä–∞–≤–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        #"/digest - –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç\n"
        #"/digest_detailed - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç\n"
        "/period - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (—Å–µ–≥–æ–¥–Ω—è/–≤—á–µ—Ä–∞/YYYY-MM-DD)\n"
        "/category - –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE, db_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        "–Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –¥–∞–π–¥–∂–µ—Å—Ç –ø—Ä–∞–≤–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        #"/digest - –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç\n"
        #"/digest_detailed - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç\n"
        "/period - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (—Å–µ–≥–æ–¥–Ω—è/–≤—á–µ—Ä–∞/YYYY-MM-DD)\n"
        "/category - –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–∞–≤–æ–≤—ã–º –Ω–æ–≤–æ—Å—Ç—è–º."
    )

async def category_command(update: Update, context: ContextTypes.DEFAULT_TYPE, db_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /category"""
    keyboard = []
    
    # –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏ —Å —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    for cat in CATEGORIES:
        # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ
        short_name = cat[:15] + "..." if len(cat) > 15 else cat
        keyboard.append([
            InlineKeyboardButton(f"{short_name} (–∫—Ä–∞—Ç–∫–æ)", callback_data=f"cat_brief_{cat}"),
            InlineKeyboardButton(f"{short_name} (–ø–æ–¥—Ä.)", callback_data=f"cat_detailed_{cat}")
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–¥—Ä—É–≥–æ–µ"
    keyboard.append([
        InlineKeyboardButton("–¥—Ä—É–≥–æ–µ (–∫—Ä–∞—Ç–∫–æ)", callback_data="cat_brief_–¥—Ä—É–≥–æ–µ"),
        InlineKeyboardButton("–¥—Ä—É–≥–æ–µ (–ø–æ–¥—Ä.)", callback_data="cat_detailed_–¥—Ä—É–≥–æ–µ")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Ç–∏–ø –æ–±–∑–æ—Ä–∞:", 
        reply_markup=reply_markup
    )

"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
"""
async def list_digests_command(message_object: telegram.Message, context: ContextTypes.DEFAULT_TYPE, db_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 15)
    digests = db_manager.find_digests_by_parameters(limit=15)
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(digests)} –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {[d['id'] for d in digests]}")
    if not digests:
        await message_object.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤.")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç—ã –ø–æ –¥–∞—Ç–µ –¥–ª—è –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    digests_by_date = {}
    for digest in digests:
        date_str = digest['date'].strftime('%Y-%m-%d')
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
        if digest.get("date_range_start") and digest.get("date_range_end"):
            days_diff = (digest["date_range_end"] - digest["date_range_start"]).days
            if days_diff > 0:
                date_str = f"{digest['date_range_start'].strftime('%Y-%m-%d')} - {digest['date_range_end'].strftime('%Y-%m-%d')}"
        
        if date_str not in digests_by_date:
            digests_by_date[date_str] = []
        
        digests_by_date[date_str].append(digest)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
    keyboard = []
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
    sorted_dates = sorted(digests_by_date.keys(), reverse=True)
    
    for date_str in sorted_dates:
        date_digests = digests_by_date[date_str]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–π–¥–∂–µ—Å—Ç—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞ —ç—Ç—É –¥–∞—Ç—É
        has_brief = any(d["digest_type"] == "brief" for d in date_digests)
        has_detailed = any(d["digest_type"] == "detailed" for d in date_digests)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–∞ —Ç–∏–ø–∞, —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        if has_brief and has_detailed:
            brief_digest = next((d for d in date_digests if d["digest_type"] == "brief"), None)
            detailed_digest = next((d for d in date_digests if d["digest_type"] == "detailed"), None)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
            brief_label = f"üìã {date_str} (–∫—Ä–∞—Ç–∫–∏–π)"
            detailed_label = f"üìö {date_str} (–ø–æ–¥—Ä–æ–±–Ω—ã–π)"
            
            # –ï—Å–ª–∏ –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É
            today = datetime.now().date()
            if brief_digest and brief_digest.get("date").date() == today:
                brief_label = f"üìå {brief_label}"
            if detailed_digest and detailed_digest.get("date").date() == today:
                detailed_label = f"üìå {detailed_label}"
            
            keyboard.append([
                InlineKeyboardButton(brief_label, callback_data=f"view_digest_{brief_digest['id']}") if brief_digest else None,
                InlineKeyboardButton(detailed_label, callback_data=f"view_digest_{detailed_digest['id']}") if detailed_digest else None
            ])
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∏–ø, —Å–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É
            for digest in date_digests:
                digest_type_label = "–∫—Ä–∞—Ç–∫–∏–π" if digest["digest_type"] == "brief" else "–ø–æ–¥—Ä–æ–±–Ω—ã–π"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Ç–∫—É —Å —É—á–µ—Ç–æ–º —Ñ–æ–∫—É—Å–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                button_label = f"üìã {date_str} ({digest_type_label})"
                if digest.get("focus_category"):
                    button_label += f" - {digest['focus_category']}"
                
                # –ï—Å–ª–∏ –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É
                today = datetime.now().date()
                if digest.get("date").date() == today:
                    button_label = f"üìå {button_label}"
                
                keyboard.append([
                    InlineKeyboardButton(button_label, callback_data=f"view_digest_{digest['id']}")
                ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
    keyboard.append([
        InlineKeyboardButton("üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç", callback_data="cd")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message_object.reply_text(
        "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=reply_markup
    )

async def category_selection_command(update: Update, context: ContextTypes.DEFAULT_TYPE, db_manager):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cat - –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    
    # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
    digests = db_manager.find_digests_by_parameters(limit=10)
    
    if not digests:
        await update.message.reply_text("–î–∞–π–¥–∂–µ—Å—Ç—ã –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º –∏ —Ç–∏–ø–∞–º (–∫—Ä–∞—Ç–∫–∏–π/–ø–æ–¥—Ä–æ–±–Ω—ã–π)
    digests_by_date = {}
    for digest in digests:
        date_str = digest['date'].strftime('%Y-%m-%d')
        if date_str not in digests_by_date:
            digests_by_date[date_str] = []
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
        if digest.get("date_range_start") and digest.get("date_range_end"):
            days_diff = (digest["date_range_end"] - digest["date_range_start"]).days
            if days_diff > 0:
                date_str = f"{digest['date_range_start'].strftime('%Y-%m-%d')} - {digest['date_range_end'].strftime('%Y-%m-%d')}"
        
        digests_by_date[date_str].append(digest)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞
    keyboard = []
    for date_str, date_digests in sorted(digests_by_date.items(), reverse=True):
        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –∑–∞ –æ–¥–Ω—É –¥–∞—Ç—É, —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        if len(date_digests) > 1:
            for digest in date_digests:
                is_today = digest.get('is_today', False)
                today_mark = "üìå " if is_today else ""
                type_mark = "üìù" if digest['digest_type'] == "brief" else "üìö"
                button_text = f"{today_mark}{type_mark} {date_str} ({digest['digest_type']})"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"select_digest_{digest['id']}")])
        else:
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ –¥–∞—Ç—É, —É–ø—Ä–æ—â–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            digest = date_digests[0]
            is_today = digest.get('is_today', False)
            today_mark = "üìå " if is_today else ""
            type_mark = "üìù" if digest['digest_type'] == "brief" else "üìö"
            button_text = f"{today_mark}{type_mark} {date_str}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"select_digest_{digest['id']}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–µ–≥–æ–¥–Ω—è" –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –¥–∞–π–¥–∂–µ—Å—Ç—É
    today_digests = [d for d in digests if d.get('is_today', False)]
    if today_digests:
        keyboard.append([InlineKeyboardButton("üìÜ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç", callback_data="select_today_digest")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", 
        reply_markup=reply_markup
    )

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞
async def handle_digest_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, db_manager, callback_data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    if callback_data.startswith("select_digest_"):
        digest_id = int(callback_data.replace("select_digest_", ""))
        await show_digest_categories(query.message, digest_id, db_manager)
    elif callback_data == "select_today_digest":
        # –ù–∞–π—Ç–∏ —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_digests = db_manager.find_digests_by_parameters(is_today=True, limit=5)
        if today_digests:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∏ –±–µ—Ä–µ–º —Å–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            unique_digests = {}
            for d in today_digests:
                d_type = d["digest_type"]
                if d_type not in unique_digests or d["id"] < unique_digests[d_type]["id"]:
                    unique_digests[d_type] = d
            
            # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç
            if "brief" in unique_digests:
                digest_id = unique_digests["brief"]["id"]
            else:
                digest_id = today_digests[0]["id"]
            
            await show_digest_categories(query.message, digest_id, db_manager)
        else:
            await query.message.reply_text("–î–∞–π–¥–∂–µ—Å—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –í —Ñ–∞–π–ª–µ telegram_bot/handlers.py 

async def show_digest_categories(message, digest_id, db_manager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    digest = db_manager.get_digest_by_id_with_sections(digest_id)
    
    if not digest:
        await message.reply_text("–î–∞–π–¥–∂–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –¥–∞–π–¥–∂–µ—Å—Ç–∞
    categories = []
    for section in digest["sections"]:
        categories.append(section["category"])
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard = []
    for category in categories:
        icon = get_category_icon(category)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç cat_digest_id_category –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ ID –¥–∞–π–¥–∂–µ—Å—Ç–∞
        keyboard.append([InlineKeyboardButton(f"{icon} {category}", callback_data=f"ds_{digest_id}_{get_short_category_id(category)}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Å—å –¥–∞–π–¥–∂–µ—Å—Ç"
    keyboard.append([InlineKeyboardButton("üìÑ –í–µ—Å—å –¥–∞–π–¥–∂–µ—Å—Ç", callback_data=f"df_{digest_id}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="sl")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    digest_date = digest['date'].strftime('%d.%m.%Y')
    digest_type = "–∫—Ä–∞—Ç–∫–∏–π" if digest['digest_type'] == "brief" else "–ø–æ–¥—Ä–æ–±–Ω—ã–π"
    
    await message.reply_text(
        f"–î–∞–π–¥–∂–µ—Å—Ç –∑–∞ {digest_date} ({digest_type}).\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def handle_date_range_input(update, context, db_manager, user_input):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç"""
    context.user_data.pop("awaiting_date_range", None)
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
        if "-" in user_input:
            # –§–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì
            start_str, end_str = user_input.split("-")
            
            # –ü–∞—Ä—Å–∏–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É
            start_parts = start_str.strip().split(".")
            if len(start_parts) != 3:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã")
            
            day, month, year = map(int, start_parts)
            start_date = datetime(year, month, day)
            
            # –ü–∞—Ä—Å–∏–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
            end_parts = end_str.strip().split(".")
            if len(end_parts) != 3:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã")
            
            day, month, year = map(int, end_parts)
            end_date = datetime(year, month, day)
            
            description = f"–∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}"
            
        else:
            # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì
            date_parts = user_input.strip().split(".")
            if len(date_parts) != 3:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
            
            day, month, year = map(int, date_parts)
            start_date = end_date = datetime(year, month, day)
            description = f"–∑–∞ {start_date.strftime('%d.%m.%Y')}"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–π–¥–∂–µ—Å—Ç–∞
        await handle_digest_generation(
            update, context, db_manager, 
            start_date, end_date, description
        )
        
    except ValueError as e:
        await update.message.reply_text(
            f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç: {str(e)}", exc_info=True)
        await update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞."
        )

async def handle_category_period_input(update, context, db_manager, user_input):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    focus_category = context.user_data.get("focus_category")
    context.user_data.pop("awaiting_category_period", None)
    context.user_data.pop("focus_category", None)
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if user_input.lower() == "—Å–µ–≥–æ–¥–Ω—è":
            start_date = end_date = datetime.now()
            description = f"–∑–∞ —Å–µ–≥–æ–¥–Ω—è —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{focus_category}'"
        elif user_input.lower() == "–≤—á–µ—Ä–∞":
            start_date = end_date = datetime.now() - timedelta(days=1)
            description = f"–∑–∞ –≤—á–µ—Ä–∞ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{focus_category}'"
        elif "-" in user_input:
            # –§–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì
            start_str, end_str = user_input.split("-")
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
            start_date = datetime.strptime(start_str.strip(), "%d.%m.%Y")
            end_date = datetime.strptime(end_str.strip(), "%d.%m.%Y")
            
            description = f"–∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')} —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{focus_category}'"
        else:
            # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì
            date = datetime.strptime(user_input.strip(), "%d.%m.%Y")
            start_date = end_date = date
            description = f"–∑–∞ {date.strftime('%d.%m.%Y')} —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{focus_category}'"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–π–¥–∂–µ—Å—Ç–∞
        await handle_digest_generation(
            update, context, db_manager, 
            start_date, end_date, description, 
            focus_category=focus_category
        )
        
    except ValueError:
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì, –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ —Å–ª–æ–≤–∞ '—Å–µ–≥–æ–¥–Ω—è'/'–≤—á–µ—Ä–∞'."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}", exc_info=True)
        await update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞."
        )

async def handle_channel_period_input(update, context, db_manager, user_input):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
    channels = context.user_data.get("channels", [])
    context.user_data.pop("awaiting_channel_period", None)
    context.user_data.pop("focus_channel", None)
    context.user_data.pop("channels", None)
    
    if not channels:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if user_input.lower() == "—Å–µ–≥–æ–¥–Ω—è":
            start_date = end_date = datetime.now()
            description = f"–∑–∞ —Å–µ–≥–æ–¥–Ω—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞–Ω–∞–ª–∞–º"
        elif user_input.lower() == "–≤—á–µ—Ä–∞":
            start_date = end_date = datetime.now() - timedelta(days=1)
            description = f"–∑–∞ –≤—á–µ—Ä–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞–Ω–∞–ª–∞–º"
        elif "-" in user_input:
            # –§–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì
            start_str, end_str = user_input.split("-")
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
            start_date = datetime.strptime(start_str.strip(), "%d.%m.%Y")
            end_date = datetime.strptime(end_str.strip(), "%d.%m.%Y")
            
            description = f"–∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')} —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞–Ω–∞–ª–∞–º"
        else:
            # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì
            date = datetime.strptime(user_input.strip(), "%d.%m.%Y")
            start_date = end_date = date
            description = f"–∑–∞ {date.strftime('%d.%m.%Y')} —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞–Ω–∞–ª–∞–º"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–π–¥–∂–µ—Å—Ç–∞
        await handle_digest_generation(
            update, context, db_manager, 
            start_date, end_date, description, 
            channels=channels
        )
        
    except ValueError:
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì, –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ —Å–ª–æ–≤–∞ '—Å–µ–≥–æ–¥–Ω—è'/'–≤—á–µ—Ä–∞'."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞: {str(e)}", exc_info=True)
        await update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ (—Å–º. —Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é handle_digest_generation)
# –í —Ñ–∞–π–ª–µ telegram_bot/handlers.py –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é button_callback

"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
"""
"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime, timedelta, time

logger = logging.getLogger(__name__)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, db_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–º–∏ callback_data"""
    query = update.callback_query
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∂–¥–∞–ª
    await query.answer()
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–ª–±—ç–∫–æ–≤ —Å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–π–¥–∂–µ—Å—Ç–∞ (view_digest_X)
        if query.data.startswith("view_digest_"):
            await view_digest_callback(update, context, db_manager)
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–µ–∫—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ (ds_X_Y - digest section)
        elif query.data.startswith("ds_"):
            await view_digest_section_callback(update, context, db_manager)
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è (pg_X_Y_Z - page navigation)
        elif query.data.startswith("pg_"):
            await page_navigation_callback(update, context, db_manager)
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ (df_X - digest full)
        elif query.data.startswith("df_"):
            await show_full_digest(update, context, db_manager)
        
        # –°–ø–∏—Å–æ–∫ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ (sl - show list)
        elif query.data == "sl": # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"
            try:
                # –ü–µ—Ä–µ–¥–∞–µ–º query.message, –∫–æ—Ç–æ—Ä–æ–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞
                await list_digests_command(query.message, context, db_manager)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {str(e)}")
                await query.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {str(e)}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ (cd - create digest)
        elif query.data == "cd":
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
            keyboard = [
                [InlineKeyboardButton("üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="nd_today")],
                [InlineKeyboardButton("üìÜ –ó–∞ –≤—á–µ—Ä–∞", callback_data="nd_yesterday")],
                [InlineKeyboardButton("üìä –£–∫–∞–∑–∞—Ç—å –ø–µ—Ä–∏–æ–¥", callback_data="nd_custom")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞:",
                reply_markup=reply_markup
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ (nd_X - new digest)
        elif query.data.startswith("nd_"):
            period_type = query.data.replace("nd_", "")
            
            if period_type == "today":
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                today = datetime.now().date()
                start_date = datetime.combine(today, time.min)
                end_date = datetime.now()
                
                await start_digest_generation(
                    query.message, 
                    start_date, 
                    end_date, 
                    "–ó–∞ —Å–µ–≥–æ–¥–Ω—è", 
                    db_manager, 
                    context
                )
                
            elif period_type == "yesterday":
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∑–∞ –≤—á–µ—Ä–∞
                yesterday = (datetime.now() - timedelta(days=1)).date()
                start_date = datetime.combine(yesterday, time.min)
                end_date = datetime.combine(yesterday, time.max)
                
                await start_digest_generation(
                    query.message, 
                    start_date, 
                    end_date, 
                    "–ó–∞ –≤—á–µ—Ä–∞", 
                    db_manager, 
                    context
                )
                
            elif period_type == "custom":
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–∏–æ–¥
                await query.message.edit_text(
                    "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "1. –ì–ì–ì–ì-–ú–ú-–î–î (–æ–¥–Ω–∞ –¥–∞—Ç–∞)\n"
                    "2. –ì–ì–ì–ì-–ú–ú-–î–î –ì–ì–ì–ì-–ú–ú-–î–î (–ø–µ—Ä–∏–æ–¥)\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 2025-04-15 –∏–ª–∏ 2025-04-10 2025-04-15"
                )
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–µ—Ä–∏–æ–¥–∞
                context.user_data["awaiting_date_range"] = True
                
        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ (cat_X_Y)

        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
        elif query.data == "sl":
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É list_digests_command
                await list_digests_command(update, context, db_manager)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {str(e)}")
                await query.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {str(e)}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        elif query.data.startswith("select_digest_"):
            try:
                digest_id = int(query.data.replace("select_digest_", ""))
                # –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º show_digest_categories, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∂–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç—Ç–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
                await show_digest_categories(query.message, digest_id, db_manager)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}")
                await query.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}")
        
        # –ï—Å–ª–∏ –∫–æ–ª–±—ç–∫ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {query.data}")
            await query.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤.")
            
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–ª–±—ç–∫–æ–≤: {str(e)}", exc_info=True)
        
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.message.reply_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤."
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
async def show_digest_by_id(message, digest_id, db_manager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ –µ–≥–æ ID"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç —Å —Å–µ–∫—Ü–∏—è–º–∏
    digest = db_manager.get_digest_by_id_with_sections(digest_id)
    
    if not digest:
        await message.reply_text("–î–∞–π–¥–∂–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    safe_text = utils.clean_markdown_text(digest["text"])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ —á–∞—Å—Ç—è–º
    chunks = utils.split_text(safe_text)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–∞–π–¥–∂–µ—Å—Ç–∞
    header = f"–î–∞–π–¥–∂–µ—Å—Ç –∑–∞ {digest['date'].strftime('%d.%m.%Y')}"
    
    if digest.get("date_range_start") and digest.get("date_range_end"):
        start_date = digest["date_range_start"].strftime("%d.%m.%Y")
        end_date = digest["date_range_end"].strftime("%d.%m.%Y")
        if start_date != end_date:
            header = f"–î–∞–π–¥–∂–µ—Å—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date} –ø–æ {end_date}"
    
    if digest.get("focus_category"):
        header += f" (—Ñ–æ–∫—É—Å: {digest['focus_category']})"
        
    if digest.get("digest_type"):
        header += f" - {digest['digest_type']}"
    
    for i, chunk in enumerate(chunks):
        if i == 0:
            text_html = utils.convert_to_html(chunk)
            await message.reply_text(
                f"{header}\n\n{text_html}",
                parse_mode='HTML'
            )
        else:
            await message.reply_text(chunk, parse_mode='HTML')

async def handle_digest_generation(update, context, db_manager, start_date, end_date, 
                          description, focus_category=None, channels=None, keywords=None, force_update=False):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π workflow"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç
    if start_date and end_date:
        days_back = (end_date.date() - start_date.date()).days + 1
        logger.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω period days_back={days_back} –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
    else:
        days_back = 1  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ days_back={days_back} –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
   
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å (–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–æ–ª–±—ç–∫–∞)
   # message = update.message if hasattr(update, 'message') else update.message
    #user_id = update.effective_user.id
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å (–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–æ–ª–±—ç–∫–∞)
    message = update.message
    #if hasattr(update, 'callback_query'):
        # –≠—Ç–æ –æ–±—ä–µ–∫—Ç Update —Å callback_query
     #   message = update.callback_query.message
      #  user_id = update.callback_query.from_user.id
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å (–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–æ–ª–±—ç–∫–∞)
    if hasattr(update, 'message') and update.message:
        # –≠—Ç–æ –æ–±—ä–µ–∫—Ç Update —Å message
        message = update.message
        user_id = update.effective_user.id
    elif hasattr(update, 'callback_query') and update.callback_query:
        # –≠—Ç–æ –æ–±—ä–µ–∫—Ç Update —Å callback_query
        message = update.callback_query.message
        user_id = update.callback_query.from_user.id
    else:
        # Fallback –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤
        message = update.effective_message if hasattr(update, 'effective_message') else None
        user_id = update.effective_user.id if hasattr(update, 'effective_user') else None
        
    if not message:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
    if not start_date:
        last_generation = db_manager.get_last_digest_generation(source="bot", user_id=user_id)
        
        if last_generation:
            start_date = last_generation["timestamp"]
            today = datetime.now().date()
            if start_date.date() == today and not focus_category and not channels:
                await message.reply_text(
                    f"–í—ã —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–π–¥–∂–µ—Å—Ç —Å–µ–≥–æ–¥–Ω—è –≤ {start_date.strftime('%H:%M')}. "
                    f"–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å {start_date.strftime('%H:%M')} –ø–æ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è?"
                )
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
                keyboard = [
                    [InlineKeyboardButton("–î–∞, –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç", callback_data="gen_digest_since_last")],
                    [InlineKeyboardButton("–ù–µ—Ç, –ø–æ–ª–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="gen_digest_today")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
                return
        else:
            start_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    
    if not end_date:
        end_date = datetime.now()
    
    if not description:
        if start_date.date() == end_date.date():
            description = f"–∑–∞ {start_date.strftime('%d.%m.%Y')}"
        else:
            description = f"–∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ)
    status_message = await message.reply_text(
        f"–ó–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ {description}.\n"
        f"{'–§–æ–∫—É—Å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ' + focus_category if focus_category else ''}\n"
        f"{'–ö–∞–Ω–∞–ª—ã: ' + ', '.join(channels) if channels else ''}\n\n"
        "–û–±—Ä–∞–±–æ—Ç–∫–∞... ‚è≥"
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    days_back = (end_date - start_date).days + 1
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ - —Å–æ–∑–¥–∞–µ–º –∏—Ö —Ç–æ–ª—å–∫–æ —Ä–∞–∑
        from llm.qwen_model import QwenLLM
        from llm.gemma_model import GemmaLLM
        from agents.data_collector import DataCollectorAgent
        from agents.analyzer import AnalyzerAgent
        from agents.critic import CriticAgent
        from agents.digester import DigesterAgent
        
        qwen_model = QwenLLM()
        gemma_model = GemmaLLM()
        
        # –≠—Ç–∞–ø 1: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∫–∞–∫ –≤ workflow
        collector = DataCollectorAgent(db_manager)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ collect_data –≤–º–µ—Å—Ç–æ _collect_all_channels_parallel
        collect_result = await collector.collect_data(
        days_back=days_back,
        force_update=force_update,
        start_date=start_date,
        end_date=end_date
        )
        
        total_messages = collect_result.get("total_new_messages", 0)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö)
        await status_message.edit_text(
            f"{status_message.text}\n‚úÖ –°–æ–±—Ä–∞–Ω–æ {total_messages} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            f"–ê–Ω–∞–ª–∏–∑ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è... üß†"
        )
        
        # –≠—Ç–∞–ø 2: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        analyzer = AnalyzerAgent(db_manager, qwen_model)
        analyzer.fast_check = True  # –í–∞–∂–Ω–æ! –í–∫–ª—é—á–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∫ –≤ workflow
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º batched-–≤–µ—Ä—Å–∏—é –º–µ—Ç–æ–¥–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        analyze_result = analyzer.analyze_messages_batched(
            limit=max(total_messages, 50),
            batch_size=10,
            confidence_threshold=2
        )
        
        analyzed_count = analyze_result.get("analyzed_count", 0)
        
        # –≠—Ç–∞–ø 3: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
        critic = CriticAgent(db_manager)
        review_result = critic.review_recent_categorizations(
            confidence_threshold=2,  # –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é ‚â§ 2
            limit=min(30, analyzed_count),  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            batch_size=5,
            max_workers=3  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –¥–∞–π–¥–∂–µ—Å—Ç–∞
        await status_message.edit_text(
            f"{status_message.text}\n‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {analyzed_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            f"–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞... üìù"
        )
        
        # –≠—Ç–∞–ø 4: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        digester = DigesterAgent(db_manager, gemma_model)
        result = digester.create_digest(
            date=end_date,
            days_back=days_back,
            digest_type="both",  # –°–æ–∑–¥–∞–µ–º –æ–±–∞ —Ç–∏–ø–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            focus_category=focus_category,
            channels=channels,
            keywords=keywords
        )
        
        if result.get("status") == "no_messages":
            await status_message.edit_text(
                f"{status_message.text}\n‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        digest_ids = {}
        if "brief_digest_id" in result:
            digest_ids["brief"] = result["brief_digest_id"]
        if "detailed_digest_id" in result:
            digest_ids["detailed"] = result["detailed_digest_id"]
        
        db_manager.save_digest_generation(
        source="bot",
        user_id=user_id,
        channels=channels,
        messages_count=total_messages,
        digest_ids=digest_ids,
        start_date=start_date,
        end_date=end_date,
        focus_category=focus_category
        )
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await status_message.edit_text(
            f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç {description} —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {analyzed_count}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤."
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}", exc_info=True)
        await status_message.edit_text(
            f"{status_message.text}\n\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        )
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
"""
async def view_digest_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, db_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    query = update.callback_query
    await query.answer()
   
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∏–∑ callback_data
    digest_id = int(query.data.replace("view_digest_", ""))
   
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç —Å —Å–µ–∫—Ü–∏—è–º–∏ –ø–æ ID
    digest = db_manager.get_digest_by_id_with_sections(digest_id)
   
    if not digest:
        await query.message.reply_text("‚ùå –î–∞–π–¥–∂–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
        return
   
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
    digest_type = "–∫—Ä–∞—Ç–∫–∏–π" if digest["digest_type"] == "brief" else "–ø–æ–¥—Ä–æ–±–Ω—ã–π"
    date_str = digest["date"].strftime("%d.%m.%Y")
   
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if digest.get("date_range_start") and digest.get("date_range_end"):
        if digest["date_range_start"].date() != digest["date_range_end"].date():
            date_str = f"{digest['date_range_start'].strftime('%d.%m.%Y')} - {digest['date_range_end'].strftime('%d.%m.%Y')}"
   
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories_stats = {}
    for section in digest["sections"]:
        categories_stats[section["category"]] = len(section["text"].split("\n\n"))
   
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è
    table_of_contents = f"üìä {digest_type.capitalize()} –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ {date_str}\n\n"
   
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ–∫—É—Å–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if digest.get("focus_category"):
        table_of_contents += f"üîç –§–æ–∫—É—Å: {digest['focus_category']}\n\n"
   
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    table_of_contents += "üìã –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n"
    for category, count in categories_stats.items():
        icon = get_category_icon(category)
        table_of_contents += f"{icon} {category.capitalize()}: –ø—Ä–∏–º–µ—Ä–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
   
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    keyboard = []
   
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not context.user_data.get("category_mapping"):
        context.user_data["category_mapping"] = {}
   
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –∫–æ—Ä–æ—Ç–∫–∏–º ID
    for section in digest["sections"]:
        category = section["category"]
        icon = get_category_icon(category)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        short_id = get_short_category_id(category)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ ID -> –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        mapping_key = f"{digest_id}_{short_id}"
        context.user_data["category_mapping"][mapping_key] = category
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –∫–æ—Ä–æ—Ç–∫–∏–º callback_data
        keyboard.append([
            InlineKeyboardButton(
                f"{icon} {category.capitalize()}", 
                callback_data=f"ds_{digest_id}_{short_id}"
            )
        ])
   
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    keyboard.append([
        InlineKeyboardButton("üìÑ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞", callback_data=f"df_{digest_id}")
    ])
   
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ (–∏–∑–º–µ–Ω–µ–Ω–∞ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)
    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤", callback_data="sl")
    ])
   
    reply_markup = InlineKeyboardMarkup(keyboard)
   
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
    await query.message.edit_text(
        table_of_contents,
        reply_markup=reply_markup
    )

       
"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
"""
async def start_digest_generation(message, start_date, end_date, period_description, db_manager, context):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    
    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
        start_date (datetime): –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
        end_date (datetime): –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
        period_description (str): –û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        db_manager (DatabaseManager): –ú–µ–Ω–µ–¥–∂–µ—Ä –ë–î
        context (CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
    """
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    status_message = await message.edit_text(
        f"–ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ {period_description}.\n\n"
        f"–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö... ‚è≥"
    )
    
    try:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –ø–µ—Ä–∏–æ–¥–µ
        days_back = (end_date.date() - start_date.date()).days + 1
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        from llm.qwen_model import QwenLLM
        from llm.gemma_model import GemmaLLM
        from agents.data_collector import DataCollectorAgent
        from agents.analyzer import AnalyzerAgent
        from agents.digester import DigesterAgent
        
        qwen_model = QwenLLM()
        gemma_model = GemmaLLM()
        
        # –≠—Ç–∞–ø 1: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        collector = DataCollectorAgent(db_manager)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await status_message.edit_text(
            f"{status_message.text}\n"
            f"–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ {period_description}... üì•"
        )
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        collect_result = await collector.collect_data(
            days_back=days_back,
            force_update=False,
            start_date=start_date,
            end_date=end_date
        )
        
        total_messages = collect_result.get("total_new_messages", 0)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await status_message.edit_text(
            f"{status_message.text}\n"
            f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤\n"
            f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è... üß†"
        )
        
        # –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        analyzer = AnalyzerAgent(db_manager, qwen_model)
        analyzer.fast_check = True
        
        analyze_result = analyzer.analyze_messages_batched(
            limit=max(total_messages, 50),
            batch_size=10
        )
        
        analyzed_count = analyze_result.get("analyzed_count", 0)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await status_message.edit_text(
            f"{status_message.text}\n"
            f"‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {analyzed_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            f"–§–æ—Ä–º–∏—Ä—É—é –¥–∞–π–¥–∂–µ—Å—Ç... üìù"
        )
        
        # –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        digester = DigesterAgent(db_manager, gemma_model)
        
        result = digester.create_digest(
            date=end_date,
            days_back=days_back,
            digest_type="both",  # –°–æ–∑–¥–∞–µ–º –æ–±–∞ —Ç–∏–ø–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            update_existing=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not (result.get("brief_digest_id") or result.get("detailed_digest_id")):
            await status_message.edit_text(
                f"{status_message.text}\n"
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        digest_ids = {}
        if "brief_digest_id" in result:
            digest_ids["brief"] = result["brief_digest_id"]
        if "detailed_digest_id" in result:
            digest_ids["detailed"] = result["detailed_digest_id"]
        
        db_manager.save_digest_generation(
        source="bot",
        user_id=context.user_data.get("user_id"),
        messages_count=total_messages,
        digest_ids=dict(digest_ids),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –≤ dict, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ª–æ–≤–∞—Ä—å
        start_date=start_date,
        end_date=end_date
        )   
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await status_message.edit_text(
            f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç {period_description} —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {analyzed_count}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
        keyboard = []
        
        if "brief_digest_id" in result:
            keyboard.append([
                InlineKeyboardButton("üìã –û—Ç–∫—Ä—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç", callback_data=f"view_digest_{result['brief_digest_id']}")
            ])
        
        if "detailed_digest_id" in result:
            keyboard.append([
                InlineKeyboardButton("üìö –û—Ç–∫—Ä—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç", callback_data=f"view_digest_{result['detailed_digest_id']}")
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
        keyboard.append([
            InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É –≤—Å–µ—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤", callback_data="sl")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await message.reply_text(
            f"–î–∞–π–¥–∂–µ—Å—Ç—ã –∑–∞ {period_description} –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É:",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}", exc_info=True)
        await status_message.edit_text(
            f"{status_message.text}\n\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        )
