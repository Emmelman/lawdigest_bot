import logging
from utils.text_utils import TextUtils
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup

logger = logging.getLogger(__name__)
utils = TextUtils()


async def show_full_digest(message, digest_id, db_manager):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏
    
    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
        digest_id (int): ID –¥–∞–π–¥–∂–µ—Å—Ç–∞
        db_manager (DatabaseManager): –ú–µ–Ω–µ–¥–∂–µ—Ä –ë–î
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ ID
    digest = db_manager.get_digest_by_id_with_sections(digest_id)
    
    if not digest:
        await message.reply_text("‚ùå –î–∞–π–¥–∂–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
        return
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    safe_text = utils.clean_markdown_text(digest["text"])
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç Telegram
    chunks = utils.split_text(safe_text, max_length=3500)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    digest_type = "–∫—Ä–∞—Ç–∫–∏–π" if digest["digest_type"] == "brief" else "–ø–æ–¥—Ä–æ–±–Ω—ã–π"
    date_str = digest["date"].strftime("%d.%m.%Y")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if digest.get("date_range_start") and digest.get("date_range_end"):
        if digest["date_range_start"].date() != digest["date_range_end"].date():
            date_str = f"{digest['date_range_start'].strftime('%d.%m.%Y')} - {digest['date_range_end'].strftime('%d.%m.%Y')}"
    
    header = f"üìä {digest_type.capitalize()} –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ {date_str}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ–∫—É—Å–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if digest.get("focus_category"):
        header += f"\nüîç –§–æ–∫—É—Å: {digest['focus_category']}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞
    for i, chunk in enumerate(chunks):
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
        text_html = utils.convert_to_html(chunk)
        
        # –î–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if i == 0:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
            if i == len(chunks) - 1:
                keyboard = [[
                    InlineKeyboardButton("üîô –ö –æ–≥–ª–∞–≤–ª–µ–Ω–∏—é –¥–∞–π–¥–∂–µ—Å—Ç–∞", callback_data=f"view_digest_{digest_id}")
                ]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await message.edit_text(
                    f"{header}\n\n{text_html}",
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            else:
                await message.edit_text(
                    f"{header}\n\n{text_html}",
                    parse_mode='HTML'
                )
        else:
            # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            if i == len(chunks) - 1:
                keyboard = [[
                    InlineKeyboardButton("üîô –ö –æ–≥–ª–∞–≤–ª–µ–Ω–∏—é –¥–∞–π–¥–∂–µ—Å—Ç–∞", callback_data=f"view_digest_{digest_id}")
                ]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await message.reply_text(
                    text_html,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            else:
                await message.reply_text(
                    text_html,
                    parse_mode='HTML'
                )

async def start_digest_generation(message, start_date, end_date, period_description, db_manager, context):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    
    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
        start_date (datetime): –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
        end_date (datetime): –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
        period_description (str): –û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        db_manager (DatabaseManager): –ú–µ–Ω–µ–¥–∂–µ—Ä –ë–î
        context (CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
    """
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    status_message = await message.edit_text(
        f"–ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ {period_description}.\n\n"
        f"–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö... ‚è≥"
    )
    
    try:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –ø–µ—Ä–∏–æ–¥–µ
        days_back = (end_date.date() - start_date.date()).days + 1
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        from llm.qwen_model import QwenLLM
        from llm.gemma_model import GemmaLLM
        from agents.data_collector import DataCollectorAgent
        from agents.analyzer import AnalyzerAgent
        from agents.digester import DigesterAgent
        
        qwen_model = QwenLLM()
        gemma_model = GemmaLLM()
        
        # –≠—Ç–∞–ø 1: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        collector = DataCollectorAgent(db_manager)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await status_message.edit_text(
            f"{status_message.text}\n"
            f"–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ {period_description}... üì•"
        )
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        collect_result = await collector.collect_data(
            days_back=days_back,
            force_update=False,
            start_date=start_date,
            end_date=end_date
        )
        
        total_messages = collect_result.get("total_new_messages", 0)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await status_message.edit_text(
            f"{status_message.text}\n"
            f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤\n"
            f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è... üß†"
        )
        
        # –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        analyzer = AnalyzerAgent(db_manager, qwen_model)
        analyzer.fast_check = True
        
        analyze_result = analyzer.analyze_messages_batched(
            limit=max(total_messages, 50),
            batch_size=10
        )
        
        analyzed_count = analyze_result.get("analyzed_count", 0)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await status_message.edit_text(
            f"{status_message.text}\n"
            f"‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {analyzed_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            f"–§–æ—Ä–º–∏—Ä—É—é –¥–∞–π–¥–∂–µ—Å—Ç... üìù"
        )
        
        # –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        digester = DigesterAgent(db_manager, gemma_model)
        
        result = digester.create_digest(
            date=end_date,
            days_back=days_back,
            digest_type="both",  # –°–æ–∑–¥–∞–µ–º –æ–±–∞ —Ç–∏–ø–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            update_existing=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not (result.get("brief_digest_id") or result.get("detailed_digest_id")):
            await status_message.edit_text(
                f"{status_message.text}\n"
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        digest_ids = {}
        if "brief_digest_id" in result:
            digest_ids["brief"] = result["brief_digest_id"]
        if "detailed_digest_id" in result:
            digest_ids["detailed"] = result["detailed_digest_id"]
        
        db_manager.save_digest_generation(
            source="bot",
            user_id=context.user_data.get("user_id"),
            messages_count=total_messages,
            digest_ids=digest_ids,
            start_date=start_date,
            end_date=end_date
        )
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await status_message.edit_text(
            f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç {period_description} —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {analyzed_count}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
        keyboard = []
        
        if "brief_digest_id" in result:
            keyboard.append([
                InlineKeyboardButton("üìã –û—Ç–∫—Ä—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç", callback_data=f"view_digest_{result['brief_digest_id']}")
            ])
        
        if "detailed_digest_id" in result:
            keyboard.append([
                InlineKeyboardButton("üìö –û—Ç–∫—Ä—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç", callback_data=f"view_digest_{result['detailed_digest_id']}")
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
        keyboard.append([
            InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É –≤—Å–µ—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤", callback_data="show_digests_list")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await message.reply_text(
            f"–î–∞–π–¥–∂–µ—Å—Ç—ã –∑–∞ {period_description} –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É:",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}", exc_info=True)
        await status_message.edit_text(
            f"{status_message.text}\n\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        )

def get_category_icon(category):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    icons = {
        '–∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã': 'üìù',
        '–Ω–æ–≤–∞—è —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞': '‚öñÔ∏è',
        '–Ω–æ–≤—ã–µ –∑–∞–∫–æ–Ω—ã': 'üìú',
        '–ø–æ–ø—Ä–∞–≤–∫–∏ –∫ –∑–∞–∫–æ–Ω–∞–º': '‚úèÔ∏è',
        '–¥—Ä—É–≥–æ–µ': 'üìå'
    }
    return icons.get(category.lower(), '‚Ä¢')    