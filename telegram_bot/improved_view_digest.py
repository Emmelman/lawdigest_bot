"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–æ–∫
"""
import hashlib
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

def get_short_category_id(category):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    
    Args:
        category (str): –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
    Returns:
        str: –ö–æ—Ä–æ—Ç–∫–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID (–¥–æ 8 —Å–∏–º–≤–æ–ª–æ–≤)
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ ID
    hash_object = hashlib.md5(category.encode())
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 6 —Å–∏–º–≤–æ–ª–æ–≤ —Ö–µ—à–∞, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –∫–æ—Ä–æ—Ç–∫–∏–º
    return hash_object.hexdigest()[:6]

async def view_digest_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, db_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∏–∑ callback_data
        digest_id = int(query.data.replace("view_digest_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç —Å —Å–µ–∫—Ü–∏—è–º–∏ –ø–æ ID
        digest = db_manager.get_digest_by_id_with_sections(digest_id)
        
        if not digest:
            await query.message.reply_text("‚ùå –î–∞–π–¥–∂–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        digest_type = "–∫—Ä–∞—Ç–∫–∏–π" if digest["digest_type"] == "brief" else "–ø–æ–¥—Ä–æ–±–Ω—ã–π"
        date_str = digest["date"].strftime("%d.%m.%Y")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if digest.get("date_range_start") and digest.get("date_range_end"):
            if digest["date_range_start"].date() != digest["date_range_end"].date():
                date_str = f"{digest['date_range_start'].strftime('%d.%m.%Y')} - {digest['date_range_end'].strftime('%d.%m.%Y')}"
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories_stats = {}
        for section in digest["sections"]:
            categories_stats[section["category"]] = len(section["text"].split("\n\n"))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è
        table_of_contents = f"üìä {digest_type.capitalize()} –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ {date_str}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ–∫—É—Å–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if digest.get("focus_category"):
            table_of_contents += f"üîç –§–æ–∫—É—Å: {digest['focus_category']}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        table_of_contents += "üìã –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n"
        for category, count in categories_stats.items():
            icon = get_category_icon(category)
            table_of_contents += f"{icon} {category.capitalize()}: –ø—Ä–∏–º–µ—Ä–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ ID
        keyboard = []
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        if not context.user_data.get("category_mapping"):
            context.user_data["category_mapping"] = {}
        
        # –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –∫–æ—Ä–æ—Ç–∫–∏–º ID
        for section in digest["sections"]:
            category = section["category"]
            icon = get_category_icon(category)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            short_id = get_short_category_id(category)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ ID -> –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            mapping_key = f"{digest_id}_{short_id}"
            context.user_data["category_mapping"][mapping_key] = category
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –∫–æ—Ä–æ—Ç–∫–∏–º callback_data
            keyboard.append([
                InlineKeyboardButton(
                    f"{icon} {category.capitalize()}", 
                    callback_data=f"ds_{digest_id}_{short_id}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        keyboard.append([
            InlineKeyboardButton("üìÑ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞", callback_data=f"df_{digest_id}")
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="sl")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        await query.message.edit_text(
            table_of_contents,
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}", exc_info=True)
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await query.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤."
        )

async def view_digest_section_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, db_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–µ–∫—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ ID"""
    query = update.callback_query
    await query.answer()
        
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ callback_data
        # –§–æ—Ä–º–∞—Ç: ds_DIGEST_ID_SHORT_CATEGORY_ID
        parts = query.data.split("_", 2)
        if len(parts) < 3:
            await query.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")
            return
        
        digest_id = int(parts[1])
        short_category_id = parts[2]
        logger.info(f"digest_id: {digest_id}, short_category_id: {short_category_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
        mapping_key = f"{digest_id}_{short_category_id}"
        
        logger.info(f"–ò—â–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –∫–ª—é—á–∞: '{mapping_key}'")
        if context.user_data.get("category_mapping"):
            logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –≤ category_mapping: {list(context.user_data['category_mapping'].keys())}")
        else:
            logger.error("category_mapping –≤–æ–æ–±—â–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

        if not context.user_data.get("category_mapping") or mapping_key not in context.user_data["category_mapping"]:
            await query.message.reply_text(
                "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–Ω–æ–≤–æ."
            )
            return
        
        category = context.user_data["category_mapping"][mapping_key]
        
        if mapping_key not in context.user_data["category_mapping"]:
            logger.error(f"–ö–ª—é—á '{mapping_key}' –ù–ï –ù–ê–ô–î–ï–ù –≤ category_mapping!")
            logger.error(f"–í–æ–∑–º–æ–∂–Ω–æ, show_digest_categories –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ context")
        else:
            logger.info(f"–ö–ª—é—á '{mapping_key}' –Ω–∞–π–¥–µ–Ω, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: '{context.user_data['category_mapping'][mapping_key]}'")
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç —Å —Å–µ–∫—Ü–∏—è–º–∏
        digest = db_manager.get_digest_by_id_with_sections(digest_id)
        
        if not digest:
            await query.message.reply_text("‚ùå –î–∞–π–¥–∂–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
            return
        
        # –ò—â–µ–º —Å–µ–∫—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        section = None
        for s in digest["sections"]:
            if s["category"] == category:
                section = s
                break
        
        if not section:
            await query.message.reply_text(f"‚ùå –°–µ–∫—Ü–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ.")
            return
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        section_parts = []
        current_part = ""
        for paragraph in section["text"].split("\n\n"):
            if len(current_part) + len(paragraph) + 2 <= 3500:  # –õ–∏–º–∏—Ç Telegram –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                if current_part:
                    current_part += "\n\n" + paragraph
                else:
                    current_part = paragraph
            else:
                section_parts.append(current_part)
                current_part = paragraph
        
        if current_part:
            section_parts.append(current_part)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π, —Ä–µ–∞–ª–∏–∑—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        if len(section_parts) > 1:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ context_data –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ —Å–µ–∫—Ü–∏–∏
            pagination_key = f"digest_{digest_id}_{short_category_id}"
            if not context.user_data.get("pagination"):
                context.user_data["pagination"] = {}
            
            context.user_data["pagination"][pagination_key] = {
                "current_page": 0,
                "total_pages": len(section_parts),
                "parts": section_parts,
                "category": category  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            digest_type = "–∫—Ä–∞—Ç–∫–∏–π" if digest["digest_type"] == "brief" else "–ø–æ–¥—Ä–æ–±–Ω—ã–π"
            date_str = digest["date"].strftime("%d.%m.%Y")
            
            header = f"üìä {digest_type.capitalize()} –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ {date_str}\n"
            header += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.capitalize()}\n"
            header += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{len(section_parts)}\n\n"
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
            from utils.text_utils import TextUtils
            content = TextUtils.convert_to_html(header + section_parts[0])
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = []
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            if len(section_parts) > 1:
                keyboard.append([
                    InlineKeyboardButton(
                        "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚û°Ô∏è", 
                        callback_data=f"pg_{digest_id}_{short_category_id}_n"
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—é –¥–∞–π–¥–∂–µ—Å—Ç–∞
            keyboard.append([
                InlineKeyboardButton(
                    "üîô –ö –æ–≥–ª–∞–≤–ª–µ–Ω–∏—é", 
                    callback_data=f"view_digest_{digest_id}"
                )
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            await query.message.edit_text(
                content,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        else:
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —á–∞—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–µ –±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            digest_type = "–∫—Ä–∞—Ç–∫–∏–π" if digest["digest_type"] == "brief" else "–ø–æ–¥—Ä–æ–±–Ω—ã–π" # Re-evaluate type for clarity
            date_str = digest["date"].strftime("%d.%m.%Y")
            
            header = f"üìä {digest_type.capitalize()} –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ {date_str}\n"
            header += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.capitalize()}\n\n"
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
            from utils.text_utils import TextUtils
            content = TextUtils.convert_to_html(header + section["text"])
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = [[
                InlineKeyboardButton(
                    "üîô –ö –æ–≥–ª–∞–≤–ª–µ–Ω–∏—é", 
                    callback_data=f"view_digest_{digest_id}"
                )
            ]]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é
            await query.message.edit_text(
                content,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–µ–∫—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}", exc_info=True)
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await query.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ–∫—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤."
        )

async def page_navigation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, db_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–µ–∫—Ü–∏–π –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ ID"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ callback_data
        # –§–æ—Ä–º–∞—Ç: pg_DIGEST_ID_SHORT_CATEGORY_ID_ACTION
        parts = query.data.split("_")
        if len(parts) < 4:
            await query.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
            return
        
        digest_id = int(parts[1])
        short_category_id = parts[2]
        action = parts[3]  # n (next) –∏–ª–∏ p (prev)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏–∑ user_data
        pagination_key = f"digest_{digest_id}_{short_category_id}"
        if not context.user_data.get("pagination") or pagination_key not in context.user_data["pagination"]:
            await query.message.reply_text(
                "‚ùå –î–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–Ω–æ–≤–æ."
            )
            return
        
        pagination_data = context.user_data["pagination"][pagination_key]
        current_page = pagination_data["current_page"]
        total_pages = pagination_data["total_pages"]
        category = pagination_data["category"]  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
        if action == "n" and current_page < total_pages - 1:
            current_page += 1
        elif action == "p" and current_page > 0:
            current_page -= 1
        else:
            # –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ context_data
        pagination_data["current_page"] = current_page
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        digest = db_manager.get_digest_by_id_with_sections(digest_id)
        
        if not digest:
            await query.message.reply_text("‚ùå –î–∞–π–¥–∂–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        digest_type = "–∫—Ä–∞—Ç–∫–∏–π" if digest["digest_type"] == "brief" else "–ø–æ–¥—Ä–æ–±–Ω—ã–π"
        date_str = digest["date"].strftime("%d.%m.%Y")
        
        header = f"üìä {digest_type.capitalize()} –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ {date_str}\n"
        header += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.capitalize()}\n"
        header += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}/{total_pages}\n\n"
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
        from utils.text_utils import TextUtils
        content = TextUtils.convert_to_html(header + pagination_data["parts"][current_page])
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_buttons = []
        if current_page > 0:
            pagination_buttons.append(
                InlineKeyboardButton(
                    "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", 
                    callback_data=f"pg_{digest_id}_{short_category_id}_p"
                )
            )
        if current_page < total_pages - 1:
            pagination_buttons.append(
                InlineKeyboardButton(
                    "–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", 
                    callback_data=f"pg_{digest_id}_{short_category_id}_n"
                )
            )
        
        if pagination_buttons:
            keyboard.append(pagination_buttons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—é –¥–∞–π–¥–∂–µ—Å—Ç–∞
        keyboard.append([
            InlineKeyboardButton(
                "üîô –ö –æ–≥–ª–∞–≤–ª–µ–Ω–∏—é", 
                callback_data=f"view_digest_{digest_id}"
            )
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        await query.message.edit_text(
            content,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º: {str(e)}", exc_info=True)
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await query.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {str(e)}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤."
        )

async def show_full_digest(update: Update, context: ContextTypes.DEFAULT_TYPE, db_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∏–∑ callback_data
        # –§–æ—Ä–º–∞—Ç: df_DIGEST_ID
        digest_id = int(query.data.replace("df_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ ID
        digest = db_manager.get_digest_by_id_with_sections(digest_id)
        
        if not digest:
            await query.message.reply_text("‚ùå –î–∞–π–¥–∂–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
            return
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        from utils.text_utils import TextUtils
        safe_text = TextUtils.clean_markdown_text(digest["text"])
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç Telegram
        chunks = TextUtils.split_text(safe_text, max_length=3500)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        digest_type = "–∫—Ä–∞—Ç–∫–∏–π" if digest["digest_type"] == "brief" else "–ø–æ–¥—Ä–æ–±–Ω—ã–π"
        date_str = digest["date"].strftime("%d.%m.%Y")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if digest.get("date_range_start") and digest.get("date_range_end"):
            if digest["date_range_start"].date() != digest["date_range_end"].date():
                date_str = f"{digest['date_range_start'].strftime('%d.%m.%Y')} - {digest['date_range_end'].strftime('%d.%m.%Y')}"
        
        header = f"üìä {digest_type.capitalize()} –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ {date_str}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ–∫—É—Å–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if digest.get("focus_category"):
            header += f"\nüîç –§–æ–∫—É—Å: {digest['focus_category']}"
        
        # –î–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å—Ç—è—Ö
        first_chunk = f"{header}\n\n{chunks[0]}"
        if len(chunks) > 1:
            first_chunk += f"\n\n(–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç, –≤—Å–µ–≥–æ {len(chunks)} —á–∞—Å—Ç–∏)"
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
        first_chunk_html = TextUtils.convert_to_html(first_chunk)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
        keyboard = [[
            InlineKeyboardButton(
                "üîô –ö –æ–≥–ª–∞–≤–ª–µ–Ω–∏—é", 
                callback_data=f"view_digest_{digest_id}"
            )
        ]]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
        await query.message.edit_text(
            first_chunk_html,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        for i in range(1, len(chunks)):
            part_text = chunks[i]
            
            # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å—Å—ã–ª–∫—É
            if i == len(chunks) - 1:
                part_text += "\n\n[–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—é –¥–∞–π–¥–∂–µ—Å—Ç–∞]"
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
            part_html = TextUtils.convert_to_html(part_text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å
            await query.message.reply_text(
                part_html,
                parse_mode='HTML'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ–ª–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}", exc_info=True)
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await query.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤."
        )

def get_category_icon(category):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    icons = {
        '–∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã': 'üìù',
        '–Ω–æ–≤–∞—è —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞': '‚öñÔ∏è',
        '–Ω–æ–≤—ã–µ –∑–∞–∫–æ–Ω—ã': 'üìú',
        '–ø–æ–ø—Ä–∞–≤–∫–∏ –∫ –∑–∞–∫–æ–Ω–∞–º': '‚úèÔ∏è',
        '–¥—Ä—É–≥–æ–µ': 'üìå'
    }
    return icons.get(category.lower(), '‚Ä¢')
