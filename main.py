"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π main.py —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Intelligent Orchestrator
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å + –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
"""
import asyncio
import logging
import argparse
import threading
import os
import sys
from datetime import datetime, timedelta
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

from config.logging_config import setup_logging
from config.settings import (
    DATABASE_URL, 
    TELEGRAM_API_ID, 
    TELEGRAM_API_HASH, 
    TELEGRAM_CHANNELS,
    TELEGRAM_BOT_TOKEN
)
from database.db_manager import DatabaseManager
from utils.telegram_session_manager import TelegramSessionManager
from telegram_bot.bot import TelegramBot
from scheduler.jobs import JobScheduler
from telethon import TelegramClient

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ workflow
from llm.qwen_model import QwenLLM
from llm.gemma_model import GemmaLLM
from agents.orchestrator import OrchestratorAgent  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
from agents.orchestrator import IntelligentOrchestratorAgent  # –ù–æ–≤—ã–π intelligent –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
from agents.agent_registry import AgentRegistry
from agents.task_queue import TaskQueue
from agents.critic import CriticAgent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logging()

def enable_detailed_reasoning_logs():
    """–í–∫–ª—é—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ reasoning –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤"""
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
    logging.getLogger('agents.analyzer').setLevel(logging.INFO)
    logging.getLogger('agents.critic').setLevel(logging.INFO)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è reasoning –ª–æ–≥–æ–≤
    reasoning_formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%H:%M:%S'
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä—ã –∞–≥–µ–Ω—Ç–æ–≤
    analyzer_logger = logging.getLogger('agents.analyzer')
    critic_logger = logging.getLogger('agents.critic')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ handlers (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å)
    if not analyzer_logger.handlers:
        analyzer_handler = logging.StreamHandler()
        analyzer_handler.setFormatter(reasoning_formatter)
        analyzer_logger.addHandler(analyzer_handler)
    
    if not critic_logger.handlers:
        critic_handler = logging.StreamHandler()
        critic_handler.setFormatter(reasoning_formatter)
        critic_logger.addHandler(critic_handler)
    
    # –û—Ç–∫–ª—é—á–∞–µ–º propagation —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤
    analyzer_logger.propagate = False
    critic_logger.propagate = False
    
    print("üß† –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ reasoning –í–ö–õ–Æ–ß–ï–ù–û")

def run_scheduler(scheduler):
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    scheduler.start()

async def collect_messages(client, db_manager, channel, days_back=1, limit_per_request=100):
    """–°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î"""
    logger.info(f"–°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_back} –¥–Ω–µ–π...")
    
    try:
        entity = await client.get_entity(channel)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days_back)
        
        logger.info(f"–ü–µ—Ä–∏–æ–¥ —Å–±–æ—Ä–∞: —Å {start_date.strftime('%Y-%m-%d')} –ø–æ {end_date.strftime('%Y-%m-%d')}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        offset_id = 0
        all_messages = []
        total_messages = 0
        
        while True:
            messages = await client.get_messages(
                entity, 
                limit=limit_per_request,
                offset_id=offset_id
            )
            
            if not messages:
                break
                
            total_messages += len(messages)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ
            filtered_messages = []
            for msg in messages:
                if msg.date.replace(tzinfo=None) >= start_date:
                    filtered_messages.append(msg)
                else:
                    # –î–æ—Å—Ç–∏–≥–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ç–∞—Ä—à–µ –Ω—É–∂–Ω–æ–π –¥–∞—Ç—ã, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Å–±–æ—Ä
                    break
            
            if not filtered_messages:
                break
                
            all_messages.extend(filtered_messages)
            
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞, –∑–Ω–∞—á–∏—Ç –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞
            if len(messages) < limit_per_request:
                break
                
            offset_id = messages[-1].id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if messages[-1].date.replace(tzinfo=None) < start_date:
                break
        
        logger.info(f"–°–æ–±—Ä–∞–Ω–æ {len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {total_messages} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
        saved_count = 0
        for msg in all_messages:
            if msg.text:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                try:
                    db_manager.save_message(
                        channel=channel,
                        message_id=msg.id,
                        text=msg.text,
                        date=msg.date.replace(tzinfo=None)
                    )
                    saved_count += 1
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg.id}: {str(e)}")
        
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel}")
        return {"channel": channel, "collected": len(all_messages), "saved": saved_count}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {channel}: {str(e)}")
        return {"channel": channel, "collected": 0, "saved": 0, "error": str(e)}

async def run_data_collection(db_manager, days_back=1, force_update=False):
    """–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    logger.info(f"–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_back} –¥–Ω–µ–π...")
    
    session_manager = TelegramSessionManager(api_id=TELEGRAM_API_ID, api_hash=TELEGRAM_API_HASH)
    client = await session_manager.get_client()
    
    try:
        results = []
        for channel in TELEGRAM_CHANNELS:
            result = await collect_messages(client, db_manager, channel, days_back)
            results.append(result)
        
        total_collected = sum(r['collected'] for r in results)
        total_saved = sum(r['saved'] for r in results)
        
        logger.info(f"–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–±—Ä–∞–Ω–æ: {total_collected}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {total_saved}")
        return {"status": "success", "total_collected": total_collected, "total_saved": total_saved, "results": results}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return {"status": "error", "error": str(e)}
    finally:
        await session_manager.disconnect_client()

async def run_message_analysis(db_manager, llm_model):
    """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info("–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    from agents.analyzer import AnalyzerAgent
    analyzer = AnalyzerAgent(db_manager, llm_model)
    
    try:
        results = analyzer.analyze_messages()
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç: {results}")
        return results
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")
        return {"status": "error", "error": str(e)}

async def run_categorization_review(db_manager, llm_model):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏–∫–æ–º"""
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏–∫–æ–º...")
    
    try:
        critic = CriticAgent(db_manager, llm_model)
        results = critic.review_recent_categorizations(
            confidence_threshold=3,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é <= 3
            limit=50,               # –ú–∞–∫—Å–∏–º—É–º 50 —Å–æ–æ–±—â–µ–Ω–∏–π
            batch_size=5,           # –ü–æ 5 –≤ –ø–∞–∫–µ—Ç–µ
            max_workers=3
        )
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ: {results.get('updated', 0)}, "
                   f"–≤—Å–µ–≥–æ: {results.get('total', 0)}")
        return results
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return {"status": "error", "error": str(e)}

async def create_digest(db_manager, llm_model, days_back=1):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_back} –¥–Ω–µ–π...")
    
    from agents.digester import DigesterAgent
    digester = DigesterAgent(db_manager, llm_model)
    digest = digester.create_digest(days_back=days_back)
    
    logger.info(f"–î–∞–π–¥–∂–µ—Å—Ç —Å–æ–∑–¥–∞–Ω: {digest.get('status', 'unknown')}")
    return digest

async def run_full_workflow(days_back=1, force_update=False):
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ (legacy –≤–µ—Ä—Å–∏—è)"""
    logger.info(f"–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞ {days_back} –¥–Ω–µ–π...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    db_manager = DatabaseManager(DATABASE_URL)
    llm_model = QwenLLM()
    
    try:
        # –≠—Ç–∞–ø 1: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        collection_result = await run_data_collection(db_manager, days_back, force_update)
        if collection_result['status'] != 'success':
            logger.error("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            return False
        
        # –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        analysis_result = await run_message_analysis(db_manager, llm_model)
        if analysis_result.get('status') == 'error':
            logger.error("–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            return False
        
        # –≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        review_result = await run_categorization_review(db_manager, llm_model)
        if review_result.get('status') == 'error':
            logger.error("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
            return False
        
        # –≠—Ç–∞–ø 4: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        digest_result = await create_digest(db_manager, llm_model, days_back)
        if digest_result.get('status') != 'success':
            logger.error("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π")
            return False
        
        logger.info("–ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return True
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {str(e)}")
        return False
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        from utils.telegram_session_manager import TelegramSessionManager
        session_manager = TelegramSessionManager()
        await session_manager.close_all_clients()

async def run_orchestrated_workflow(scenario: str = "daily_workflow", **kwargs):
    """–ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —á–µ—Ä–µ–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä"""
    logger.info(f"–ó–∞–ø—É—Å–∫ –æ—Ä–∫–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: {scenario}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    db_manager = DatabaseManager(DATABASE_URL)
    agent_registry = AgentRegistry(db_manager)
    orchestrator = OrchestratorAgent(db_manager, agent_registry)  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        result = await orchestrator.plan_and_execute(scenario, **kwargs)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–´–ü–û–õ–ù–ï–ù–ò–Ø ===")
        logger.info(f"–°—Ç–∞—Ç—É—Å: {result.get('status')}")
        logger.info(f"–°—Ü–µ–Ω–∞—Ä–∏–π: {result.get('metrics', {}).get('scenario')}")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {result.get('metrics', {}).get('success_rate', 0):.1%}")
        logger.info(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.get('metrics', {}).get('total_execution_time', 0):.1f}—Å")
        
        summary = result.get('summary', {})
        logger.info(f"–°–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {summary.get('collected_messages', 0)}")
        logger.info(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {summary.get('analyzed_messages', 0)}")
        logger.info(f"–£–ª—É—á—à–µ–Ω–æ –∫—Ä–∏—Ç–∏–∫–æ–º: {summary.get('reviewed_messages', 0)}")
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {len(summary.get('created_digests', []))}")
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {len(summary.get('updated_digests', []))}")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = result.get('recommendations', [])
        if recommendations:
            logger.info("=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===")
            for rec in recommendations:
                logger.info(f"- {rec.get('description')}")
        
        return result.get('status') == 'success'
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: {str(e)}")
        return False
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        from utils.telegram_session_manager import TelegramSessionManager
        session_manager = TelegramSessionManager()
        await session_manager.close_all_clients()

async def run_intelligent_workflow(scenario: str = "daily_workflow", **kwargs):
    """
    –ó–∞–ø—É—Å–∫ intelligent workflow —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    
    Args:
        scenario: –°—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    """
    try:
        logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ: intelligent workflow")
        logger.info(f"–ó–∞–ø—É—Å–∫ intelligent –æ—Ä–∫–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: {scenario}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        db_manager = DatabaseManager(DATABASE_URL)
        agent_registry = AgentRegistry(db_manager)
        orchestrator = IntelligentOrchestratorAgent(db_manager, agent_registry)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∞–≥–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        health_check = await agent_registry.health_check()
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∞–≥–µ–Ω—Ç–æ–≤: {health_check['overall_status']}")
        
        if health_check['overall_status'] == 'critical':
            logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≥–µ–Ω—Ç–∞–º–∏, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
            return {"status": "error", "reason": "critical_agent_failures"}
        
        # –ó–∞–ø—É—Å–∫ intelligent –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        result = await orchestrator.plan_and_execute(scenario=scenario, **kwargs)
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        _log_execution_results(result)
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ intelligent workflow: {str(e)}")
        import traceback
        traceback.print_exc()
        return {"status": "error", "error": str(e)}
    
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        try:
            from utils.telegram_session_manager import TelegramSessionManager
            session_manager = TelegramSessionManager()
            await session_manager.close_all_clients()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {str(e)}")

def _log_execution_results(result: dict):
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        logger.info("=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–´–ü–û–õ–ù–ï–ù–ò–Ø ===")
        logger.info(f"–°—Ç–∞—Ç—É—Å: {result.get('status')}")
        
        metrics = result.get('metrics', {})
        if metrics:
            logger.info(f"–°—Ü–µ–Ω–∞—Ä–∏–π: {metrics.get('scenario')}")
            logger.info(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {metrics.get('success_rate', 0)*100:.1f}%")
            logger.info(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {metrics.get('total_execution_time', 0):.1f}—Å")
            logger.info(f"Intelligent –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {metrics.get('intelligent_planning', False)}")
        
        summary = result.get('summary', {})
        if summary:
            logger.info(f"–°–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {summary.get('collected_messages', 0)}")
            logger.info(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {summary.get('analyzed_messages', 0)}")
            logger.info(f"–£–ª—É—á—à–µ–Ω–æ –∫—Ä–∏—Ç–∏–∫–æ–º: {summary.get('reviewed_messages', 0)}")
            
            created_digests = summary.get('created_digests', [])
            if created_digests:
                logger.info(f"–°–æ–∑–¥–∞–Ω–æ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {len(created_digests)}")
                for digest in created_digests:
                    logger.info(f"  - {digest}")
            
            updated_digests = summary.get('updated_digests', [])
            if updated_digests:
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {len(updated_digests)}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º context –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        planning_context = result.get('planning_context', {})
        if planning_context:
            logger.info("=== –ö–û–ù–¢–ï–ö–°–¢ –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø ===")
            logger.info(f"–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {planning_context.get('original_unanalyzed', 0)}")
            logger.info(f"–° –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é: {planning_context.get('original_low_confidence', 0)}")
            logger.info(f"–î–∞–π–¥–∂–µ—Å—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {planning_context.get('original_digests_count', 0)}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = result.get('recommendations', [])
        if recommendations:
            logger.info("=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===")
            for rec in recommendations:
                logger.info(f"  - {rec.get('description')}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
        task_results = result.get('task_results', [])
        if task_results:
            logger.info("=== –î–ï–¢–ê–õ–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ó–ê–î–ê–ß ===")
            for task_result in task_results:
                status_icon = "‚úÖ" if task_result['status'] == 'completed' else "‚ùå"
                logger.info(f"  {status_icon} {task_result['task']}: {task_result['status']} "
                           f"({task_result['execution_time']:.2f}—Å)")
                if task_result.get('error'):
                    logger.info(f"    –û—à–∏–±–∫–∞: {task_result['error']}")
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}")

async def cleanup_on_shutdown(loop, scheduler=None, bot=None):
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if scheduler:
        logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫...")
        scheduler.stop()
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if bot and hasattr(bot, 'application'):
        logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞...")
        await bot.application.stop()
    
    # –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    logger.info(f"–û—Ç–º–µ–Ω–∞ {len(tasks)} –∑–∞–¥–∞—á...")
    for task in tasks:
        task.cancel()
    
    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    await asyncio.gather(*tasks, return_exceptions=True)
    
    logger.info("–ó–∞–∫—Ä—ã–≤–∞–µ–º event loop...")
    loop.stop()

def run_bot_with_scheduler():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –∑–∞–¥–∞—á"""
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ Telegram –±–æ—Ç–∞ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
    db_manager = DatabaseManager(DATABASE_URL)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler = JobScheduler(db_manager)
    scheduler_thread = threading.Thread(target=run_scheduler, args=(scheduler,))
    scheduler_thread.daemon = True
    scheduler_thread.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
    bot = TelegramBot(db_manager)
    bot.run()
    
    # –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –ø–æ–∫–∞ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É")
    scheduler.stop()
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ Telethon –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    session_manager = TelegramSessionManager(api_id=TELEGRAM_API_ID, api_hash=TELEGRAM_API_HASH)
    asyncio.run(session_manager.disconnect_client())

def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description='LawDigest Bot - Intelligent News Processing System')
    
    parser.add_argument('--mode', 
                       choices=['bot', 'workflow', 'legacy', 'digest'], 
                       default='bot',
                       help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: bot - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞, '
                            'workflow - –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞, '
                            'legacy - legacy workflow –±–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, '
                            'digest - —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞')
    
    parser.add_argument('--orchestrator', 
                       action='store_true',
                       help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–∂–∏–º–∞ workflow')
    
    parser.add_argument('--intelligent', 
                       action='store_true',
                       help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å intelligent –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä (–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è)')
    
    parser.add_argument('--scenario', 
                       choices=['daily_workflow', 'urgent_update', 'full_analysis', 'digest_only'],
                       default='daily_workflow',
                       help='–°—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
    
    parser.add_argument('--days', 
                       type=int, 
                       default=1,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    
    parser.add_argument('--force-update', 
                       action='store_true',
                       help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö')
    
    parser.add_argument('--debug', 
                       action='store_true',
                       help='–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏')
    
    return parser.parse_args()

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    args = parse_arguments()
    enable_detailed_reasoning_logs()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω verbose –∏–ª–∏ debug
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
        logging.getLogger('agents.analyzer').setLevel(logging.DEBUG)
        logging.getLogger('agents.critic').setLevel(logging.DEBUG)
        logging.getLogger('agents.orchestrator').setLevel(logging.DEBUG)
        logger.debug("–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω")
        print("üîç –í–∫–ª—é—á–µ–Ω debug —Ä–µ–∂–∏–º —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏")
    
    logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ: {args.mode}")
    logger.info(f"LawDigest Bot v2.0 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π intelligent –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    try:
        if args.mode == 'bot':
            run_bot_with_scheduler()
            
        elif args.mode == 'workflow':
            if args.intelligent:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π intelligent –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
                logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è intelligent –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä")
                result = asyncio.run(run_intelligent_workflow(
                    scenario=args.scenario,
                    days_back=args.days,
                    force_update=args.force_update
                ))
                
                # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                if result.get('status') == 'success':
                    logger.info("üéâ Intelligent –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                else:
                    logger.error(f"‚ùå Intelligent –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏: {result.get('error', 'Unknown error')}")
                    
            elif args.orchestrator:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
                logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä")
                success = asyncio.run(run_orchestrated_workflow(
                    scenario=args.scenario, 
                    days_back=args.days,
                    force_update=args.force_update
                ))
                
                if success:
                    logger.info("üéâ –û—Ä–∫–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                else:
                    logger.error("‚ùå –û—Ä–∫–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")
            else:
                # Legacy —Ä–µ–∂–∏–º
                logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è legacy —Ä–µ–∂–∏–º")
                success = asyncio.run(run_full_workflow(
                    days_back=args.days, 
                    force_update=args.force_update
                ))
                
                if success:
                    logger.info("üéâ Legacy –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                else:
                    logger.error("‚ùå Legacy –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")
                    
        elif args.mode == 'legacy':
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ legacy —Ä–µ–∂–∏–º
            logger.info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π legacy —Ä–µ–∂–∏–º")
            success = asyncio.run(run_full_workflow(
                days_back=args.days,
                force_update=args.force_update
            ))
            
        elif args.mode == 'digest':
            # –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            if args.intelligent:
                # –ß–µ—Ä–µ–∑ intelligent –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
                result = asyncio.run(run_intelligent_workflow(
                    scenario='digest_only',
                    days_back=args.days
                ))
            else:
                # Legacy —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
                db_manager = DatabaseManager(DATABASE_URL)
                gemma_model = GemmaLLM()
                digest = asyncio.run(create_digest(db_manager, gemma_model, days_back=args.days))
                
                if digest and digest.get('status') == 'success':
                    logger.info("–î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
                    logger.info(digest.get('digest_text', ''))
                else:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç")
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()