"""
Агент для анализа и классификации сообщений
"""
import logging
from langchain.tools import Tool
from crewai import Agent, Task

from config.settings import CATEGORIES

logger = logging.getLogger(__name__)

class AnalyzerAgent:
    """Агент для анализа и классификации сообщений"""
    
    def __init__(self, db_manager, llm_model=None):
        """
        Инициализация агента
        
        Args:
            db_manager (DatabaseManager): Менеджер БД
            llm_model (QwenLLM, optional): Модель для обработки текста
        """
        self.db_manager = db_manager
        
        # Импорт здесь, чтобы избежать циклических импортов
        from llm.qwen_model import QwenLLM
        self.llm_model = llm_model or QwenLLM()
        
        # Создаем инструмент для анализа сообщений
        analyze_tool = Tool(
            name="analyze_messages",
            func=self.analyze_messages,
            description="Анализирует и классифицирует сообщения из Telegram-каналов"
        )
        
        # Создаем агента CrewAI
        self.agent = Agent(
            name="Analyzer",
            role="Аналитик",
            goal="Анализировать и классифицировать сообщения по категориям",
            backstory="Я анализирую содержание сообщений из официальных каналов и определяю их тематику для формирования дайджеста.",
            verbose=True,
            tools=[analyze_tool]
        )
    
    def _classify_message(self, message_text):
        """
        Классификация текста сообщения
        
        Args:
            message_text (str): Текст сообщения
            
        Returns:
            str: Категория сообщения
        """
        prompt = f"""
        Внимательно проанализируй следующий текст из правительственного Telegram-канала и определи, к какой из следующих категорий он относится:

        1. Законодательные инициативы - предложения о создании новых законов или нормативных актов, находящиеся на стадии обсуждения, внесения или рассмотрения в Госдуме. Обычно содержат фразы: "законопроект", "проект закона", "внесен на рассмотрение", "планируется принять", "предлагается установить".

        2. Новая судебная практика - решения, определения, постановления судов, создающие прецеденты или разъясняющие применение норм права. Признаки: упоминание судов (ВС, Верховный Суд, КС, арбитражный суд), номеров дел, дат решений, слов "решение", "определение", "постановление", "практика", "разъяснение".

        3. Новые законы - недавно принятые и вступившие или вступающие в силу законодательные акты. Признаки: "закон принят", "закон подписан", "вступает в силу", "вступил в силу", указание номера федерального закона.

        4. Поправки к законам - изменения в существующих законах, внесенные или вступившие в силу. Признаки: "внесены изменения", "поправки", "новая редакция", "дополнен статьей", указания на изменение конкретных статей существующих законов.

        Если текст не относится ни к одной из категорий, то верни "другое".

        Особые указания для точной категоризации:
        - Если описывается решение суда, определение суда, обзор практики - это "новая судебная практика"
        - Если указаны названия судов (ВС, КС) и описываются их решения - это "новая судебная практика"
        - Если упоминаются номера дел или определений - это "новая судебная практика"
        - Если говорится о внесении законопроекта или его рассмотрении, но не о принятии - это "законодательные инициативы"
        - Если упоминается о принятии закона в третьем чтении, о подписании Президентом, принятии закона или законов - это "новые законы"
        
        Текст сообщения:
        {message_text}
        
        Категория (выбери только одну):
        """
    
        try:
            response = self.llm_model.classify(prompt, CATEGORIES + ["другое"])
            return response
        except Exception as e:
            logger.error(f"Ошибка при классификации текста: {str(e)}")
            return "другое"
    
    def analyze_messages(self, limit=50):
        """
        Инструмент для анализа и классификации сообщений
        
        Args:
            limit (int): Максимальное количество сообщений для анализа
            
        Returns:
            dict: Результаты анализа
        """
        logger.info(f"Запуск анализа сообщений, лимит: {limit}")
        
        # Получаем непроанализированные сообщения
        messages = self.db_manager.get_unanalyzed_messages(limit=limit)
        
        if not messages:
            logger.info("Нет сообщений для анализа")
            return {
                "status": "success",
                "analyzed_count": 0,
                "categories": {}
            }
        
        categories_count = {category: 0 for category in CATEGORIES + ["другое"]}
        analyzed_count = 0
        
        for message in messages:
            # Пропускаем сообщения без текста
            if not message.text:
                continue
            
            # Определяем категорию сообщения
            category = self._classify_message(message.text)
            
            # Обновляем категорию в БД
            if self.db_manager.update_message_category(message.id, category):
                categories_count[category] += 1
                analyzed_count += 1
        
        logger.info(f"Анализ завершен. Проанализировано {analyzed_count} сообщений")
        
        return {
            "status": "success",
            "analyzed_count": analyzed_count,
            "categories": categories_count
        }
    
    def create_task(self):
        """
        Создание задачи для агента
        
        Returns:
            Task: Задача CrewAI
        """
        return Task(
            description="Проанализировать и классифицировать непроанализированные сообщения",
            agent=self.agent,
            expected_output="Результаты анализа с информацией о количестве проанализированных сообщений и их категориях"
        )