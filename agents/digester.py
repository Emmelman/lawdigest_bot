"""
–ê–≥–µ–Ω—Ç –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
"""
import logging
import re
from datetime import datetime, timedelta
from crewai import Agent, Task
from concurrent.futures import ThreadPoolExecutor, as_completed
from config.settings import CATEGORIES, BOT_USERNAME
from database.db_manager import DatabaseManager
from llm.gemma_model import GemmaLLM
from langchain.tools import Tool
from datetime import datetime, time, timedelta
logger = logging.getLogger(__name__)

class DigesterAgent:
    """–ê–≥–µ–Ω—Ç –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    
    def __init__(self, db_manager, llm_model=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
        
        Args:
            db_manager (DatabaseManager): –ú–µ–Ω–µ–¥–∂–µ—Ä –ë–î
            llm_model (GemmaLLM, optional): –ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
        """
        self.db_manager = db_manager
        self.llm_model = llm_model or GemmaLLM()
        
        create_digest_tool = Tool(
            name="create_digest",
            func=self.create_digest,
            description="–§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –ø—Ä–∞–≤–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"
        )

        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ CrewAI
        self.agent = Agent(
            name="Digester",
            role="–î–∞–π–¥–∂–µ—Å—Ç-–º–µ–π–∫–µ—Ä",
            goal="–§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ –ø—Ä–∞–≤–æ–≤—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º",
            backstory="–Ø —Å–æ–∑–¥–∞—é –∫—Ä–∞—Ç–∫–∏–µ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ –æ–±–∑–æ—Ä—ã –ø—Ä–∞–≤–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.",
            verbose=True,
            tools=[create_digest_tool]
        )
    def _extract_title_for_url(self, text, url):
         
        """
        –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è URL –∏–∑ @dumainfo
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –¥—É–º—ã
        if "@dumainfo" in url or "dumainfo" in text:
            # –†–∞–∑–¥–µ–ª–∏–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ –Ω–∞–π–¥–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            lines = text.split('\n')
            for i, line in enumerate(lines):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if len(line.strip()) < 10 or "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –î—É–º–∞" in line:
                    continue
                
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if len(line.strip()) > 15 and "http" not in line and "@" not in line:
                    return line.strip()
        # –†–∞–∑–¥–µ–ª–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –¥–æ –∏ –ø–æ—Å–ª–µ URL
        parts = text.split(url)
        
        if len(parts) < 2:
            return url[:50] + "..." if len(url) > 50 else url
        
        before_url = parts[0]
        after_url = parts[1]
        
        # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–¥ URL
        before_paragraphs = before_url.split('\n\n')
        last_paragraph = before_paragraphs[-1] if before_paragraphs else ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –î—É–º–∞" in last_paragraph or "VK" in last_paragraph or len(last_paragraph.strip()) < 20:
            # –ò—â–µ–º –±–æ–ª–µ–µ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
            lines = text.split('\n')
            for line in lines[1:5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
                line = line.strip()
                if len(line) > 30 and "http" not in line and "Telegram" not in line:
                    return line[:100] + "..." if len(line) > 100 else line
        
        # –î–∞–ª–µ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞
        sentences = last_paragraph.split('.')
        candidate_title = sentences[-1].strip() if sentences else last_paragraph.strip()
        
        # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ—Å–ª–µ URL
        if len(candidate_title) < 15:
            after_paragraphs = after_url.split('\n\n')
            first_paragraph = after_paragraphs[0] if after_paragraphs else ""
            sentences = first_paragraph.split('.')
            candidate_title = sentences[0].strip() if sentences else first_paragraph.strip()
        
        # –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        candidate_title = candidate_title.replace("\n", " ").strip()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if len(candidate_title) > 80:
            candidate_title = candidate_title[:77] + "..."
        
        return candidate_title
    def _add_category_icon(self, category):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        Args:
            category (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            
        Returns:
            str: –ò–∫–æ–Ω–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        """
        icons = {
            '–∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã': 'üìù',
            '–Ω–æ–≤–∞—è —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞': '‚öñÔ∏è',
            '–Ω–æ–≤—ã–µ –∑–∞–∫–æ–Ω—ã': 'üìú',
            '–ø–æ–ø—Ä–∞–≤–∫–∏ –∫ –∑–∞–∫–æ–Ω–∞–º': '‚úèÔ∏è',
            '–¥—Ä—É–≥–æ–µ': 'üìå'
        }
        return icons.get(category, '‚Ä¢')

    def _clean_text_with_links(self, text):
        """
        –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å—Å—ã–ª–æ–∫ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        """
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ URL –≤ —Ç–µ–∫—Å—Ç–µ
        url_pattern = r'https?://[^\s\)\]\>]+'
        urls = re.findall(url_pattern, text)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã URL, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ URL
        for url in set(urls):
            if urls.count(url) > 1:
                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —ç—Ç–æ–≥–æ URL
                positions = [m.start() for m in re.finditer(re.escape(url), text)]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
                for pos in positions[1:]:
                    end_pos = pos + len(url)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å—é markdown —Å—Å—ã–ª–∫–∏
                    if pos > 0 and text[pos-1:pos] == '(' and end_pos < len(text) and text[end_pos:end_pos+1] == ')':
                        # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –ø–µ—Ä–µ–¥ URL
                        bracket_pos = text.rfind('[', 0, pos)
                        if bracket_pos != -1:
                            # –≠—Ç–æ —á–∞—Å—Ç—å markdown —Å—Å—ã–ª–∫–∏, –Ω–µ —É–¥–∞–ª—è–µ–º
                            continue
                    
                    # –£–¥–∞–ª—è–µ–º URL
                    text = text[:pos] + text[end_pos:]
                    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤—Ö–æ–∂–¥–µ–Ω–∏–π
                    positions = [p - len(url) if p > pos else p for p in positions]
        
        # –ó–∞–º–µ–Ω—è–µ–º –æ–±—ã—á–Ω—ã–µ URL –Ω–∞ markdown —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å—Ç—å—é markdown
        for url in set(urls):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL —á–∞—Å—Ç—å—é markdown —Å—Å—ã–ª–∫–∏
            if not re.search(r'\[.*?\]\(' + re.escape(url) + r'\)', text):
                # –ó–¥–µ—Å—å –º—ã –ù–ï –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–π —Ç–µ–∫—Å—Ç
                # –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ URL –∫–∞–∫ –µ—Å—Ç—å –∏–ª–∏ –¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Å—ã–ª–∫—É
                # –ù–ï –¥–µ–ª–∞–µ–º: new_link = f"[{url}]({url})"
                continue  # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –Ω–µ –º–µ–Ω—è–µ–º –æ–±—ã—á–Ω—ã–µ URL
        
        return text
    def _extract_links_and_headlines(self, text):
        """
        –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏
        """
        results = []
        
        # –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –≤ markdown —Ñ–æ—Ä–º–∞—Ç–µ [—Ç–µ–∫—Å—Ç](—Å—Å—ã–ª–∫–∞)
        markdown_pattern = r'\[(.*?)\]\((https?://[^\s\)]+)\)'
        markdown_links = re.findall(markdown_pattern, text)
        
        for title, url in markdown_links:
            # –£–¥–æ—Å—Ç–æ–≤–µ—Ä–∏–º—Å—è, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π
            if title and len(title.strip()) > 3:
                results.append({
                    "title": title.strip(),
                    "url": url.strip(),
                    "is_markdown": True
                })
        
        # –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ã—á–Ω—ã—Ö URL
        url_pattern = r'https?://[^\s\)\]\>]+'
        
        # –ù–∞—Ö–æ–¥–∏–º URL, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ markdown —Ñ–æ—Ä–º–∞—Ç–µ
        all_urls = re.findall(url_pattern, text)
        markdown_urls = [link[1] for link in markdown_links]
        
        for url in all_urls:
            if url not in markdown_urls and url.strip():
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ URL
                title = self._extract_title_for_url(text, url)
                
                results.append({
                    "title": title,
                    "url": url.strip(),
                    "is_markdown": False
                })
        
        return results
    
    def _generate_brief_section(self, category, messages):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–±–∑–æ—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏
        """
        logger.info(f"–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–±–∑–æ—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'. –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π.")

        if not messages:
            return f"–ó–∞ –¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Å—ã–ª–∫–∞—Ö
        all_items = []
        
        for msg in messages:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ msg - —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞
                if hasattr(msg, 'text'):
                    # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                    links = self._extract_links_and_headlines(msg.text)
                    
                    if links:
                        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å—Å—ã–ª–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∏–∑ –Ω–∏—Ö
                        for link in links:
                            all_items.append({
                                "title": link["title"],
                                "url": link["url"],
                                "channel": msg.channel,
                                "date": msg.date,
                                "message_id": msg.id,
                                "has_url": True
                            })
                    else:
                        # –ï—Å–ª–∏ —Å—Å—ã–ª–æ–∫ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                        first_line = msg.text.split('\n')[0]
                        title = first_line[:100] + "..." if len(first_line) > 100 else first_line
                        
                        all_items.append({
                            "title": title,
                            "url": f"https://t.me/{BOT_USERNAME}?start=msg_{msg.id}",
                            "channel": msg.channel,
                            "date": msg.date,
                            "message_id": msg.id,
                            "has_url": False  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –Ω–∞—Å—Ç–æ—è—â–∞—è —Å—Å—ã–ª–∫–∞
                        })
                else:
                    # –ï—Å–ª–∏ msg –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    logger.warning(f"–≠–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º Message: {type(msg)}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}': {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if not all_items:
            logger.warning(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
            return f"–ó–∞ –¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å."
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ (—Å–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ)
        all_items.sort(key=lambda x: x["date"], reverse=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–µ–∫—Ü–∏–∏
        category_icon = self._add_category_icon(category)
        section_text = f"## {category_icon} {category.upper()}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_descriptions = {
            '–∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã': "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–æ–Ω–æ–≤, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è",
            '–Ω–æ–≤–∞—è —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞': "–†–µ—à–µ–Ω–∏—è –∏ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è —Å—É–¥–æ–≤, —Å–æ–∑–¥–∞—é—â–∏–µ –ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç—ã",
            '–Ω–æ–≤—ã–µ –∑–∞–∫–æ–Ω—ã': "–ù–µ–¥–∞–≤–Ω–æ –ø—Ä–∏–Ω—è—Ç—ã–µ –∏ –≤—Å—Ç—É–ø–∏–≤—à–∏–µ –≤ —Å–∏–ª—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–µ –∞–∫—Ç—ã",
            '–ø–æ–ø—Ä–∞–≤–∫–∏ –∫ –∑–∞–∫–æ–Ω–∞–º': "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–æ–Ω–∞—Ö",
            '–¥—Ä—É–≥–æ–µ': "–î—Ä—É–≥–∏–µ –ø—Ä–∞–≤–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        }
        
        description = category_descriptions.get(category, "")
        if description:
            section_text += f"{description}:\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è —Ç–µ, –≥–¥–µ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫
        for idx, item in enumerate(all_items):
            formatted_date = item["date"].strftime("%d.%m.%Y")
            channel_name = item["channel"]
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è
            message = self.db_manager.get_message_by_id(item["message_id"])
            annotation = self._generate_short_annotation(message.text)

            if item["has_url"]:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç–æ—è—â–∞—è —Å—Å—ã–ª–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ñ–æ—Ä–º–∞—Ç
                section_text += f"<b>{idx+1}.</b> <a href='{item['url']}'>{item['title']}</a> - {channel_name}, {formatted_date}\n<i>{annotation}</i>\n\n"
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏, –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                section_text += f"<b>{idx+1}.</b> <b>{item['title']}</b> - {channel_name}, {formatted_date}\n<i>{annotation}</i>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª–Ω—ã–π –æ–±–∑–æ—Ä
        section_text += f"\n[–û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—ã–π –æ–±–∑–æ—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'](/category/{category})\n"
    
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—á–µ–∫ –ø–æ—Å–ª–µ —Ü–∏—Ñ—Ä
        section_text = re.sub(r'(\d+)\\\.\s*', r'\1. ', section_text)
        return section_text

    def _generate_short_annotation(self, text, max_length=150):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        """
        # –£–¥–∞–ª—è–µ–º URL –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'https?://\S+', '', text)
        text = re.sub(r'\s+', ' ', text).strip()
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã
        paragraphs = text.split('\n\n')
        
        # –ò—â–µ–º —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π –∞–±–∑–∞—Ü, –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
        first_paragraph = paragraphs[0] if paragraphs else ""
        content_paragraph = None
        
        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ—è–≤–ª—è—é—â–∏–π—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∞–±–∑–∞—Ü 
        for paragraph in paragraphs[1:]:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –∞–±–∑–∞—Ü—ã
            clean_paragraph = paragraph.strip()
            if len(clean_paragraph) < 30 or clean_paragraph.startswith("http") or "@" in clean_paragraph:
                continue
                
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ—Ç –∞–±–∑–∞—Ü –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
            content_paragraph = clean_paragraph
            break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–±–∑–∞—Ü, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π
        if not content_paragraph:
            if len(paragraphs) > 1 and len(paragraphs[1].strip()) > 20:
                content_paragraph = paragraphs[1].strip()
            else:
                content_paragraph = first_paragraph
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        sentences = re.split(r'(?<=[.!?])\s+', content_paragraph)
        annotation = sentences[0] if sentences else content_paragraph
        
        # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º
        if len(annotation) > max_length:
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É –ø–µ—Ä–µ–¥ –ª–∏–º–∏—Ç–æ–º
            last_period = annotation[:max_length].rfind('.')
            if last_period > max_length // 2:  # –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ
                annotation = annotation[:last_period+1]
            else:
                # –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –≤ –Ω–∞—á–∞–ª–µ, –æ–±—Ä–µ–∑–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
                words = annotation[:max_length].split()
                annotation = ' '.join(words[:-1]) + '...'
        
        return annotation
    
    def _generate_detailed_section(self, category, messages):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        Args:
            category (str): –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            messages (list): –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            
        Returns:
            str: –¢–µ–∫—Å—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        """
        logger.info(f"–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'. –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π.")
        
        if not messages:
            logger.warning(f"–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –ø—É—Å—Ç")
            return f"–ó–∞ –¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
        
        # –õ–æ–≥–≥–∏—Ä—É–µ–º —Ç–∏–ø—ã –ø–µ—Ä–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–¢–∏–ø—ã –ø–µ—Ä–≤—ã—Ö 3 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':")
        for i, msg in enumerate(messages[:3]):
            logger.info(f"  –≠–ª–µ–º–µ–Ω—Ç {i}: —Ç–∏–ø={type(msg)}, –∞—Ç—Ä–∏–±—É—Ç—ã={dir(msg) if hasattr(msg, '__dict__') else '–ù–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤'}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_icon = self._add_category_icon(category)
        category_display = f"{category_icon} {category}"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        MAX_MESSAGES = 5  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        MAX_MESSAGE_LENGTH = 1500  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        # –û—á–∏—â–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        cleaned_messages = []
        for i, msg in enumerate(messages[:MAX_MESSAGES]):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ msg - —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞
                if hasattr(msg, 'text'):
                    # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    message_text = msg.text
                    logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {i} –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}': –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ = {len(message_text)}")
                    
                    if len(message_text) > MAX_MESSAGE_LENGTH:
                        message_text = message_text[:MAX_MESSAGE_LENGTH] + "... (—Ç–µ–∫—Å—Ç —Å–æ–∫—Ä–∞—â–µ–Ω)"
                        
                    cleaned_text = self._clean_text_with_links(message_text)
                    cleaned_messages.append(
                        f"–ö–∞–Ω–∞–ª: {msg.channel}\n–î–∞—Ç–∞: {msg.date.strftime('%d.%m.%Y')}\n\n{cleaned_text}"
                    )
                else:
                    # –ï—Å–ª–∏ msg - –Ω–µ –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    logger.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ {i} –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ 'text'")
                    logger.error(f"–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(msg)}")
                    if isinstance(msg, dict):
                        logger.error(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–æ–≤–∞—Ä—è: {msg}")
                    elif isinstance(msg, str):
                        logger.error(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–æ–∫–∏: {msg[:100]}")
                    else:
                        logger.error(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã: {dir(msg)}")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
                    logger.error(f"–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: {str(msg)}")
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {i} –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}': {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if not cleaned_messages:
            logger.warning(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
            return f"–ó–∞ –¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å."
        
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(cleaned_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –æ—á–∏—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è LLM
        messages_text = "\n\n---\n\n".join(cleaned_messages)
        
        try:
            # –ë–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∏ —Ç–æ—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            prompt = f"""
            –°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
            
            {messages_text}
            
            –û–±–∑–æ—Ä –¥–æ–ª–∂–µ–Ω:
            1. –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            2. –£–ø–æ–º—è–Ω—É—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–∫–∞–Ω–∞–ª—ã)
            3. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
            4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å **–ø–æ–ª—É–∂–∏—Ä–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ** –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
            5. –ë—ã—Ç—å 2-3 –∞–±–∑–∞—Ü–∞ –¥–ª–∏–Ω–æ–π
            """
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
            response = self.llm_model.generate(prompt, max_tokens=1500, temperature=0.7)
            
            if not response or len(response.strip()) < 50:
                logger.warning(f"–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
                raise ValueError("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç")
                
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}', –¥–ª–∏–Ω–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
            return response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}': {str(e)}", exc_info=True)
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ–±–∑–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ—é—â–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π
            fallback_text = f"–û–±–∑–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':\n\n"
            for i, msg in enumerate(messages[:5]):
                try:
                    if hasattr(msg, 'channel') and hasattr(msg, 'date') and hasattr(msg, 'text'):
                        channel_name = msg.channel
                        date_str = msg.date.strftime("%d.%m.%Y")
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
                        lines = msg.text.split('\n')
                        title = lines[0][:100]
                        if len(title) == 100:
                            title += "..."
                            
                        fallback_text += f"**{i+1}.** {title} (–ò—Å—Ç–æ—á–Ω–∏–∫: {channel_name}, {date_str})\n\n"
                    else:
                        logger.warning(f"–ü—Ä–æ–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è {i} –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ - –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤")
                except Exception as inner_e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {i}: {str(inner_e)}")
            
            logger.info(f"–°–æ–∑–¥–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}', –¥–ª–∏–Ω–∞: {len(fallback_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            return fallback_text

    def _generate_digest_intro(self, date, total_messages, categories_count, is_brief=True, days_back=1):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–≤–æ–¥–Ω–æ–π —á–∞—Å—Ç–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞
    
        Args:
            date (datetime): –î–∞—Ç–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            total_messages (int): –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            categories_count (dict): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            is_brief (bool): –ü—Ä–∏–∑–Ω–∞–∫ –∫—Ä–∞—Ç–∫–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            days_back (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –¥–∞–π–¥–∂–µ—Å—Ç
            
        Returns:
            str: –¢–µ–∫—Å—Ç –≤–≤–æ–¥–Ω–æ–π —á–∞—Å—Ç–∏
        """
        formatted_date = date.strftime("%d.%m.%Y")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–∏–æ–¥–æ–º
        period_text = formatted_date
        if days_back > 1:
            start_date = (date - timedelta(days=days_back-1)).strftime("%d.%m.%Y")
            period_text = f"–ø–µ—Ä–∏–æ–¥ —Å {start_date} –ø–æ {formatted_date}"
        
        categories_info = "\n".join([f"- {cat}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π" for cat, count in categories_count.items() if count > 0])
        
        prompt = f"""
        –ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∫ {"–∫—Ä–∞—Ç–∫–æ–º—É" if is_brief else "–ø–æ–¥—Ä–æ–±–Ω–æ–º—É"} –¥–∞–π–¥–∂–µ—Å—Ç—É –ø—Ä–∞–≤–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {period_text}.
        
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:
        - –ü–µ—Ä–∏–æ–¥: {period_text}
        - –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
        - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
        {categories_info}
        
        –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º (1-2 –∞–±–∑–∞—Ü–∞) –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±—â—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.
        {"–£–ø–æ–º—è–Ω–∏, —á—Ç–æ —ç—Ç–æ –∫—Ä–∞—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è, –∏ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–∞–º." if is_brief else "–£–ø–æ–º—è–Ω–∏, —á—Ç–æ —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞."}
        """
        
        try:
            response = self.llm_model.generate(prompt, max_tokens=300)
            return response
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –∫ –¥–∞–π–¥–∂–µ—Å—Ç—É: {str(e)}")
            intro_text = f"# –î–∞–π–¥–∂–µ—Å—Ç –ø—Ä–∞–≤–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {formatted_date}"
            if is_brief:
                intro_text += "\n\n*–ö—Ä–∞—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è. –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–∞–º.*"
            else:
                intro_text += "\n\n*–ü–æ–¥—Ä–æ–±–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞.*"
            return intro_text
    
    def _process_categories_parallel(self, categories_to_process, messages_by_category, digest_type):
        """
        –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–∫—Ü–∏–π –¥–∞–π–¥–∂–µ—Å—Ç–∞
        """
        results = {}
        
        logger.info(f"–ù–∞—á–∞–ª–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ {len(categories_to_process)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ç–∏–ø–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ '{digest_type}'")
        for category in categories_to_process:
            logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}': {len(messages_by_category[category])} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        with ThreadPoolExecutor(max_workers=min(4, len(categories_to_process))) as executor:
            future_to_category = {}
            
            for category in categories_to_process:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
                if digest_type == "brief":
                    future = executor.submit(
                        self._generate_brief_section, category, messages_by_category[category]
                    )
                else:
                    future = executor.submit(
                        self._generate_detailed_section, category, messages_by_category[category]
                    )
                future_to_category[future] = category
            
            for future in as_completed(future_to_category):
                category = future_to_category[future]
                try:
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
                    section_text = future.result()
                    results[category] = section_text
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category}', –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(section_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}': {str(e)}", exc_info=True)
        
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} –∏–∑ {len(categories_to_process)}")
        return results

    def create_digest(self, date=None, days_back=1, digest_type="both", 
                update_existing=True, focus_category=None,
                channels=None, keywords=None, digest_id=None):
        """
        –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        
        Args:
            date (datetime, optional): –î–∞—Ç–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è)
            days_back (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            digest_type (str): –¢–∏–ø –¥–∞–π–¥–∂–µ—Å—Ç–∞: "brief", "detailed", "both"
            update_existing (bool): –û–±–Ω–æ–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
            focus_category (str, optional): –§–æ–∫—É—Å –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            channels (list, optional): –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            keywords (list, optional): –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            digest_id (int, optional): ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
        """
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞: date={date}, days_back={days_back}, —Ç–∏–ø={digest_type}")
    
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
        if date:
            # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–µ—Ü —ç—Ç–æ–≥–æ –¥–Ω—è
            end_date = datetime.combine(date.date() if isinstance(date, datetime) else date, 
                                    time(23, 59, 59))
            
            # –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ - —ç—Ç–æ –Ω–∞—á–∞–ª–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –º–∏–Ω—É—Å (days_back-1) –¥–Ω–µ–π
            if days_back == 1:
                # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω 1 –¥–µ–Ω—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
                start_date = datetime.combine(end_date.date(), time(0, 0, 0))
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É: —Å {start_date.strftime('%Y-%m-%d %H:%M')} "
                        f"–ø–æ {end_date.strftime('%Y-%m-%d %H:%M')}")
            else:
                # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –±–æ–ª—å—à–µ –¥–Ω–µ–π, –æ—Ç—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∑–∞–¥
                start_date = (end_date - timedelta(days=days_back-1)).replace(hour=0, minute=0, second=0)
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ {days_back} –¥–Ω–µ–π: —Å {start_date.strftime('%Y-%m-%d %H:%M')} "
                        f"–ø–æ {end_date.strftime('%Y-%m-%d %H:%M')}")
        else:
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            end_date = datetime.now()
            
            if days_back == 1:
                # –î–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–µ —Å—É—Ç–∫–∏
                start_date = datetime.combine(end_date.date(), time(0, 0, 0))
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å: —Å {start_date.strftime('%Y-%m-%d %H:%M')} "
                        f"–ø–æ {end_date.strftime('%Y-%m-%d %H:%M')}")
            else:
                # –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–Ω–µ–π - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥
                start_date = (end_date - timedelta(days=days_back-1)).replace(hour=0, minute=0, second=0)
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ {days_back} –¥–Ω–µ–π –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞: "
                        f"—Å {start_date.strftime('%Y-%m-%d %H:%M')} –ø–æ {end_date.strftime('%Y-%m-%d %H:%M')}")
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%Y-%m-%d')} –ø–æ {end_date.strftime('%Y-%m-%d')}, —Ç–∏–ø: {digest_type}")
        
        
        # –ë–õ–û–ö 3: –ü–û–õ–£–ß–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô - –£–°–¢–†–ê–ù–ï–ù–ê –î–£–ë–õ–ò–ö–ê–¶–ò–Ø –í–´–ó–û–í–ê
        filter_result = self.db_manager.get_filtered_messages(
            start_date=start_date,
            end_date=end_date,
            category=focus_category,
            channels=channels,
            keywords=keywords
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if isinstance(filter_result, dict) and "messages" in filter_result:
            messages = filter_result["messages"]
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {filter_result.get('total', 0)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
        else:
            messages = filter_result  # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä—è–º–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)")
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if not messages:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥")
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥
            all_messages = self.db_manager.get_messages_by_date_range(start_date, end_date)
            
            if all_messages:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤")
                messages = all_messages
            else:
                logger.info("–°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –∏–∑ Telegram...")
                from agents.data_collector import DataCollectorAgent
                import asyncio
                
                collector = DataCollectorAgent(self.db_manager)
                
                # –°–æ–∑–¥–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                try:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º start_date –∏ end_date
                    collect_result = loop.run_until_complete(collector.collect_data(
                        days_back=days_back,
                        force_update=True,
                        start_date=start_date,
                        end_date=end_date
                    ))
                    
                    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {collect_result}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞
                    messages = self.db_manager.get_messages_by_date_range(start_date, end_date)
                finally:
                    loop.close()
                    
                if not messages:
                    logger.error("–°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–∂–µ –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –∏–∑ Telegram")
                    return {
                        "status": "no_messages",
                        "message": "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"
                    }
        
        # –û—Å—Ç–∞–≤—à–∞—è—Å—è —á–∞—Å—Ç—å –º–µ—Ç–æ–¥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        messages_by_category = {}
        categories_count = {category: 0 for category in CATEGORIES}
        categories_count["–¥—Ä—É–≥–æ–µ"] = 0
        total_messages = 0
        
        for msg in messages:
            if not hasattr(msg, 'category') or not hasattr(msg, 'text'):
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫ –æ–±—ä–µ–∫—Ç–∞, –Ω–µ —è–≤–ª—è—é—â–µ–≥–æ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º: {type(msg)}")
                continue
                
            category = msg.category if msg.category else "–¥—Ä—É–≥–æ–µ"
            if category not in messages_by_category:
                messages_by_category[category] = []
            messages_by_category[category].append(msg)
            
            if category in categories_count:
                categories_count[category] += 1
            else:
                categories_count["–¥—Ä—É–≥–æ–µ"] += 1
            
            total_messages += 1
        
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π
        if total_messages == 0:
            logger.error("–ü–æ—Å–ª–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            return {
                "status": "no_messages",
                "message": "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"
            }

        # –í –º–µ—Ç–æ–¥–µ create_digest –¥–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:

        logger.info(f"–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(messages_by_category)}")
        for category, msgs in messages_by_category.items():
            logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}': {len(msgs)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            for i, msg in enumerate(msgs[:3]):
                logger.info(f"  –°–æ–æ–±—â–µ–Ω–∏–µ {i} –¥–ª—è '{category}': —Ç–∏–ø={type(msg)}, –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç 'text'={hasattr(msg, 'text')}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        brief_sections = {}
        detailed_sections = {}
        
        if digest_type in ["brief", "both"]:
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            categories_to_process = [cat for cat in messages_by_category.keys()]
            brief_sections = self._process_categories_parallel(
                categories_to_process, messages_by_category, "brief"
            )
        
        if digest_type in ["detailed", "both"]:
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            categories_to_process = [cat for cat in messages_by_category.keys()]
            detailed_sections = self._process_categories_parallel(
                categories_to_process, messages_by_category, "detailed"
            )

        results = {
            "status": "success",
            "date": end_date.strftime("%Y-%m-%d"),
            "total_messages": total_messages,
            "categories": categories_count,
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if digest_type in ["brief", "both"]:
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–≤–æ–¥–Ω—É—é —á–∞—Å—Ç—å
                intro_text = self._generate_digest_intro(
                    end_date, total_messages, categories_count, 
                    is_brief=True, days_back=days_back
                )
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∫—Ä–∞—Ç–∫–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
                brief_text = f"{intro_text}\n\n"
                
                # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
                for category in CATEGORIES:
                    if category in brief_sections:
                        brief_text += f"{brief_sections[category]}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–¥—Ä—É–≥–æ–µ" –≤ –∫–æ–Ω–µ—Ü, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
                if "–¥—Ä—É–≥–æ–µ" in brief_sections:
                    brief_text += f"{brief_sections['–¥—Ä—É–≥–æ–µ']}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥—Ä–æ–±–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç, –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –æ–±–∞
                if digest_type == "both":
                    brief_text += "\n\n[–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç](/digest/detailed)\n"
                
                results["brief_digest_text"] = brief_text
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∞—Ç–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –≤ –ë–î —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                try:
                    brief_result = self.db_manager.save_digest_with_parameters(
                        end_date, 
                        brief_text, 
                        brief_sections,
                        digest_type="brief",
                        date_range_start=start_date,
                        date_range_end=end_date,
                        focus_category=focus_category,
                        channels_filter=channels,
                        keywords_filter=keywords,
                        digest_id=digest_id if digest_type == "brief" else None
                    )
                    results["brief_digest_id"] = brief_result["id"]
                    logger.info(f"–ö—Ä–∞—Ç–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω (ID: {brief_result['id']})")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}")
                    results["brief_error"] = str(e)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}")
                results["brief_error"] = str(e)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if digest_type in ["detailed", "both"]:
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–≤–æ–¥–Ω—É—é —á–∞—Å—Ç—å
                intro_text = self._generate_digest_intro(
                    end_date, total_messages, categories_count, 
                    is_brief=False, days_back=days_back
                )
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
                detailed_text = f"{intro_text}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤ –ø–æ—Ä—è–¥–∫–µ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
                for category in CATEGORIES:
                    if category in detailed_sections:
                        category_icon = self._add_category_icon(category)
                        detailed_text += f"## {category_icon} {category.upper()}\n\n{detailed_sections[category]}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–¥—Ä—É–≥–æ–µ" –≤ –∫–æ–Ω–µ—Ü, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
                if "–¥—Ä—É–≥–æ–µ" in detailed_sections:
                    category_icon = self._add_category_icon("–¥—Ä—É–≥–æ–µ")
                    detailed_text += f"## {category_icon} –î–†–£–ì–ò–ï –ù–û–í–û–°–¢–ò\n\n{detailed_sections['–¥—Ä—É–≥–æ–µ']}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫—Ä–∞—Ç–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç, –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –æ–±–∞
                if digest_type == "both":
                    detailed_text += "\n\n[–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ä–∞—Ç–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç](/digest/brief)\n"
                
                results["detailed_digest_text"] = detailed_text
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤ –ë–î —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                try:
                    detailed_result = self.db_manager.save_digest_with_parameters(
                        end_date, 
                        detailed_text, 
                        detailed_sections,
                        digest_type="detailed",
                        date_range_start=start_date,
                        date_range_end=end_date,
                        focus_category=focus_category,
                        channels_filter=channels,
                        keywords_filter=keywords,
                        digest_id=digest_id if digest_type == "detailed" else None
                    )
                    results["detailed_digest_id"] = detailed_result["id"]
                    logger.info(f"–ü–æ–¥—Ä–æ–±–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω (ID: {detailed_result['id']})")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}")
                    results["detailed_error"] = str(e)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}")
                results["detailed_error"] = str(e)
        
        return results
    
    def create_task(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        
        Returns:
            Task: –ó–∞–¥–∞—á–∞ CrewAI
        """
        return Task(
            description="–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –ø—Ä–∞–≤–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å",
            agent=self.agent,
            expected_output="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"
        )
    def update_digests_for_date(self, date):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
        
        Args:
            date (datetime): –î–∞—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –¥–∞—Ç—É {date.strftime('%Y-%m-%d')}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã, –≤–∫–ª—é—á–∞—é—â–∏–µ —ç—Ç—É –¥–∞—Ç—É
        digests = self.db_manager.get_digests_containing_date(date)
        
        if not digests:
            logger.info(f"–î–∞–π–¥–∂–µ—Å—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –¥–∞—Ç—É {date.strftime('%Y-%m-%d')}, –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return {"status": "no_digests", "date": date.strftime('%Y-%m-%d')}
        
        results = {"updated_digests": []}
        
        for digest in digests:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            digest_date = digest["date"]
            digest_type = digest["digest_type"]
            focus_category = digest["focus_category"]
            channels = digest["channels_filter"]
            keywords = digest["keywords_filter"]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if digest["date_range_start"] and digest["date_range_end"]:
                start_date = digest["date_range_start"]
                end_date = digest["date_range_end"]
                days_back = (end_date - start_date).days + 1
            else:
                # –ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å
                start_date = end_date = digest_date
                days_back = 1
            
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                result = self.create_digest(
                    date=end_date,
                    days_back=days_back,
                    digest_type=digest_type,
                    update_existing=True,
                    focus_category=focus_category,
                    channels=channels,
                    keywords=keywords,
                    digest_id=digest["id"]
                )
                
                results["updated_digests"].append({
                    "digest_id": digest["id"],
                    "digest_type": digest_type,
                    "date": end_date.strftime('%Y-%m-%d'),
                    "status": "success"
                })
                
                logger.info(f"–î–∞–π–¥–∂–µ—Å—Ç ID {digest['id']} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ ID {digest['id']}: {str(e)}")
                results["updated_digests"].append({
                    "digest_id": digest["id"],
                    "digest_type": digest_type,
                    "date": end_date.strftime('%Y-%m-%d'),
                    "status": "error",
                    "error": str(e)
                })
        
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(results['updated_digests'])} –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –¥–ª—è –¥–∞—Ç—ã {date.strftime('%Y-%m-%d')}")
        return results
    def save_digest_with_parameters(self, date, text, sections, digest_type="brief", 
                              date_range_start=None, date_range_end=None, 
                              focus_category=None, channels_filter=None, 
                              keywords_filter=None, digest_id=None):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        
        Args:
            date (datetime): –î–∞—Ç–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            text (str): –¢–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞
            sections (dict): –°–ª–æ–≤–∞—Ä—å —Å–µ–∫—Ü–∏–π
            digest_type (str): –¢–∏–ø –¥–∞–π–¥–∂–µ—Å—Ç–∞
            date_range_start (datetime): –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            date_range_end (datetime): –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            focus_category (str): –§–æ–∫—É—Å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            channels_filter (list): –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            keywords_filter (list): –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            digest_id (int): ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –¥–∞–π–¥–∂–µ—Å—Ç–µ
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        today = datetime.now().date()
        is_today_digest = date.date() == today
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –≤ –ë–î
        result = self.db_manager.save_digest_with_parameters(
            date=date,
            text=text,
            sections=sections,
            digest_type=digest_type,
            date_range_start=date_range_start,
            date_range_end=date_range_end,
            focus_category=focus_category,
            channels_filter=channels_filter,
            keywords_filter=keywords_filter,
            digest_id=digest_id,
            is_today=is_today_digest,
            last_updated=datetime.now()  # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        )
        
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –¥–∞–π–¥–∂–µ—Å—Ç —Ç–∏–ø–∞ '{digest_type}' –∑–∞ {date.strftime('%Y-%m-%d')}, ID: {result['id']}")
        return result