"""
–ê–≥–µ–Ω—Ç –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
"""
import logging
import re
from datetime import datetime, timedelta
from crewai import Agent, Task

from config.settings import CATEGORIES, BOT_USERNAME
from database.db_manager import DatabaseManager
from llm.gemma_model import GemmaLLM
from langchain.tools import Tool

logger = logging.getLogger(__name__)

class DigesterAgent:
    """–ê–≥–µ–Ω—Ç –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    
    def __init__(self, db_manager, llm_model=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
        
        Args:
            db_manager (DatabaseManager): –ú–µ–Ω–µ–¥–∂–µ—Ä –ë–î
            llm_model (GemmaLLM, optional): –ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
        """
        self.db_manager = db_manager
        self.llm_model = llm_model or GemmaLLM()
        
        create_digest_tool = Tool(
            name="create_digest",
            func=self.create_digest,
            description="–§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –ø—Ä–∞–≤–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"
        )

        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ CrewAI
        self.agent = Agent(
            name="Digester",
            role="–î–∞–π–¥–∂–µ—Å—Ç-–º–µ–π–∫–µ—Ä",
            goal="–§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ –ø—Ä–∞–≤–æ–≤—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º",
            backstory="–Ø —Å–æ–∑–¥–∞—é –∫—Ä–∞—Ç–∫–∏–µ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ –æ–±–∑–æ—Ä—ã –ø—Ä–∞–≤–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.",
            verbose=True,
            tools=[create_digest_tool]
        )
    def _extract_title_for_url(self, text, url):
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è URL
        
        Args:
            text (str): –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            url (str): URL –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            
        Returns:
            str: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        """
        # –†–∞–∑–¥–µ–ª–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –¥–æ –∏ –ø–æ—Å–ª–µ URL
        parts = text.split(url)
        
        if len(parts) < 2:
            return url[:50] + "..." if len(url) > 50 else url
        
        before_url = parts[0]
        after_url = parts[1]
        
        # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–¥ URL
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–¥ URL
        before_paragraphs = before_url.split('\n\n')
        last_paragraph = before_paragraphs[-1] if before_paragraphs else ""
        
        # –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sentences = last_paragraph.split('.')
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫
        candidate_title = sentences[-1].strip() if sentences else last_paragraph.strip()
        
        # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –µ–≥–æ –Ω–µ—Ç, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ—Å–ª–µ URL
        if len(candidate_title) < 15:
            after_paragraphs = after_url.split('\n\n')
            first_paragraph = after_paragraphs[0] if after_paragraphs else ""
            sentences = first_paragraph.split('.')
            candidate_title = sentences[0].strip() if sentences else first_paragraph.strip()
        
        # –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if len(candidate_title) < 10:
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –∏–∑ URL
            from urllib.parse import urlparse
            domain = urlparse(url).netloc
            return f"–°—Å—ã–ª–∫–∞ –Ω–∞ {domain}"
        
        # –û—á–∏—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        candidate_title = candidate_title.replace("\n", " ").strip()
        
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ 
        # (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ "[–Ω–∞—è –î—É–º–∞ (VK)" -> "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –î—É–º–∞ (VK)")
        if candidate_title.startswith("[") and "]" not in candidate_title[:15]:
            # –ò—â–µ–º –ø–æ–ª–Ω–æ–µ —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—Å—Ç–µ
            words = candidate_title.split()
            if words and words[0].startswith("["):
                first_word = words[0][1:]  # –£–¥–∞–ª—è–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
                
                # –ò—â–µ–º –ø–æ–ª–Ω–æ–µ —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—Å—Ç–µ
                possible_words = [word for word in text.split() 
                                if word.endswith(first_word) or first_word in word]
                
                if possible_words:
                    # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–ª–æ–≤–æ
                    full_word = max(possible_words, key=len)
                    candidate_title = candidate_title.replace(words[0], "[" + full_word)
        
        return candidate_title
    def _add_category_icon(self, category):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        Args:
            category (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            
        Returns:
            str: –ò–∫–æ–Ω–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        """
        icons = {
            '–∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã': 'üìù',
            '–Ω–æ–≤–∞—è —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞': '‚öñÔ∏è',
            '–Ω–æ–≤—ã–µ –∑–∞–∫–æ–Ω—ã': 'üìú',
            '–ø–æ–ø—Ä–∞–≤–∫–∏ –∫ –∑–∞–∫–æ–Ω–∞–º': '‚úèÔ∏è',
            '–¥—Ä—É–≥–æ–µ': 'üìå'
        }
        return icons.get(category, '‚Ä¢')

    def _clean_text_with_links(self, text):
        """
        –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å—Å—ã–ª–æ–∫ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        Args:
            text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Å—Å—ã–ª–∫–∞–º–∏
            
        Returns:
            str: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ URL –≤ —Ç–µ–∫—Å—Ç–µ
        url_pattern = r'https?://[^\s\)\]\>]+'
        urls = re.findall(url_pattern, text)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã URL, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ URL
        for url in set(urls):
            if urls.count(url) > 1:
                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —ç—Ç–æ–≥–æ URL
                positions = [text.find(url, pos) for pos in range(len(text)) 
                            if text.find(url, pos) != -1]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
                for pos in positions[1:]:
                    end_pos = pos + len(url)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å—é markdown —Å—Å—ã–ª–∫–∏
                    if (pos > 0 and text[pos-1] == '(' and end_pos < len(text) and text[end_pos] == ')'):
                        # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –ø–µ—Ä–µ–¥ URL
                        bracket_pos = text.rfind('[', 0, pos)
                        if bracket_pos != -1:
                            # –≠—Ç–æ —á–∞—Å—Ç—å markdown —Å—Å—ã–ª–∫–∏, –Ω–µ —É–¥–∞–ª—è–µ–º
                            continue
                    
                    # –£–¥–∞–ª—è–µ–º URL
                    text = text[:pos] + text[end_pos:]
                    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤—Ö–æ–∂–¥–µ–Ω–∏–π
                    positions = [p - len(url) if p > pos else p for p in positions]
        
        # –ó–∞–º–µ–Ω—è–µ–º –æ–±—ã—á–Ω—ã–µ URL –Ω–∞ markdown —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å—Ç—å—é markdown
        for url in set(urls):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL —á–∞—Å—Ç—å—é markdown —Å—Å—ã–ª–∫–∏
            markdown_pattern = r'\[(.*?)\]\(' + re.escape(url) + r'\)'
            if not re.search(markdown_pattern, text):
                # –ó–∞–º–µ–Ω—è–µ–º URL –Ω–∞ markdown —Å—Å—ã–ª–∫—É —Å —Ç–µ–º –∂–µ URL –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–µ–∫—Å—Ç–∞
                short_url = url.replace('https://', '').replace('http://', '')
                if len(short_url) > 30:
                    short_url = short_url[:30] + "..."
                new_link = f"[{short_url}]({url})"
                text = text.replace(url, new_link)
        
        return text
    def _extract_links_and_headlines(self, text):
        """
        –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏
        """
        results = []
        
        # –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –≤ markdown —Ñ–æ—Ä–º–∞—Ç–µ [—Ç–µ–∫—Å—Ç](—Å—Å—ã–ª–∫–∞)
        markdown_pattern = r'\[(.*?)\]\((https?://[^\s\)]+)\)'
        markdown_links = re.findall(markdown_pattern, text)
        
        for title, url in markdown_links:
            # –£–¥–æ—Å—Ç–æ–≤–µ—Ä–∏–º—Å—è, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π
            if title and len(title.strip()) > 3:
                results.append({
                    "title": title.strip(),
                    "url": url.strip(),
                    "is_markdown": True
                })
        
        # –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ã—á–Ω—ã—Ö URL
        url_pattern = r'https?://[^\s\)\]\>]+'
        
        # –ù–∞—Ö–æ–¥–∏–º URL, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ markdown —Ñ–æ—Ä–º–∞—Ç–µ
        all_urls = re.findall(url_pattern, text)
        markdown_urls = [link[1] for link in markdown_links]
        
        for url in all_urls:
            if url not in markdown_urls and url.strip():
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ URL
                title = self._extract_title_for_url(text, url)
                
                results.append({
                    "title": title,
                    "url": url.strip(),
                    "is_markdown": False
                })
        
        return results
    
    def _generate_brief_section(self, category, messages):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–±–∑–æ—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏
        
        Args:
            category (str): –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            messages (list): –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            
        Returns:
            str: –¢–µ–∫—Å—Ç –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–±–∑–æ—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        """
        if not messages:
            return f"–ó–∞ –¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        all_links = []
        
        for msg in messages:
            links = self._extract_links_and_headlines(msg.text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –∏ –¥–∞—Ç–µ –∫ –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–µ
            for link in links:
                link["channel"] = msg.channel
                link["date"] = msg.date
                link["message_id"] = msg.id
                all_links.append(link)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if not all_links:
            for msg in messages[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç–µ
                bot_link = f"https://t.me/{BOT_USERNAME}?start=msg_{msg.id}"
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫, —É–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
                title = msg.text[:100].replace('\n', ' ').strip()
                title = title + "..." if len(msg.text) > 100 else title
                
                all_links.append({
                    "title": title,
                    "url": bot_link,
                    "channel": msg.channel,
                    "date": msg.date,
                    "message_id": msg.id,
                    "is_markdown": False
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ –¥–∞—Ç–µ (—Å–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ)
        all_links.sort(key=lambda x: x["date"], reverse=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–µ–∫—Ü–∏–∏
        category_icon = self._add_category_icon(category)
        section_text = f"## {category_icon} {category.upper()}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_descriptions = {
            '–∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã': "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–æ–Ω–æ–≤, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è",
            '–Ω–æ–≤–∞—è —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞': "–†–µ—à–µ–Ω–∏—è –∏ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è —Å—É–¥–æ–≤, —Å–æ–∑–¥–∞—é—â–∏–µ –ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç—ã",
            '–Ω–æ–≤—ã–µ –∑–∞–∫–æ–Ω—ã': "–ù–µ–¥–∞–≤–Ω–æ –ø—Ä–∏–Ω—è—Ç—ã–µ –∏ –≤—Å—Ç—É–ø–∏–≤—à–∏–µ –≤ —Å–∏–ª—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–µ –∞–∫—Ç—ã",
            '–ø–æ–ø—Ä–∞–≤–∫–∏ –∫ –∑–∞–∫–æ–Ω–∞–º': "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–æ–Ω–∞—Ö",
            '–¥—Ä—É–≥–æ–µ': "–î—Ä—É–≥–∏–µ –ø—Ä–∞–≤–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        }
        
        description = category_descriptions.get(category, "")
        if description:
            section_text += f"{description}:\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        for idx, link in enumerate(all_links[:15]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 15 —Å—Å—ã–ª–æ–∫
            formatted_date = link["date"].strftime("%d.%m.%Y")
            channel_name = link["channel"].replace("@", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title = link["title"]
            if title.startswith("[") and not title.endswith("]") and "]" not in title[:15]:
                # –ò—â–µ–º –ø–æ–ª–Ω–æ–µ —Å–ª–æ–≤–æ
                title = self._extract_title_for_url(messages[0].text, link["url"])
            
            section_text += f"{idx+1}. [{title}]({link['url']}) - {channel_name}, {formatted_date}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª–Ω—ã–π –æ–±–∑–æ—Ä
        section_text += f"\n[–û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—ã–π –æ–±–∑–æ—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'](/category/{category})\n"
        
        return section_text

    def _generate_detailed_section(self, category, messages):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        Args:
            category (str): –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            messages (list): –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            
        Returns:
            str: –¢–µ–∫—Å—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        """
        if not messages:
            return f"–ó–∞ –¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_icon = self._add_category_icon(category)
        category_display = f"{category_icon} {category}"
        
        # –û—á–∏—â–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        cleaned_messages = []
        for msg in messages[:15]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 15 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            cleaned_text = self._clean_text_with_links(msg.text)
            cleaned_messages.append(
                f"–ö–∞–Ω–∞–ª: {msg.channel}\n–î–∞—Ç–∞: {msg.date.strftime('%d.%m.%Y')}\n\n{cleaned_text}"
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –æ—á–∏—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è LLM
        messages_text = "\n\n---\n\n".join(cleaned_messages)
        
        prompt = f"""
        –°—Ñ–æ—Ä–º–∏—Ä—É–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–µ–Ω–Ω—ã—Ö Telegram-–∫–∞–Ω–∞–ª–æ–≤.
        
        –°–û–û–ë–©–ï–ù–ò–Ø:
        {messages_text}
        
        –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –î–ê–ô–î–ñ–ï–°–¢–£:
        1. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç –ø–æ –≤–∞–∂–Ω—ã–º —Ç–µ–º–∞–º –∏ —Å–æ–±—ã—Ç–∏—è–º, –æ–±—ä–µ–¥–∏–Ω—è—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
        2. –ù–∞—á–Ω–∏ —Å —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –∏ –Ω–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ.
        3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ —É–∫–∞–∂–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ (–∫–∞–Ω–∞–ª).
        4. –°–æ—Ö—Ä–∞–Ω–∏ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏: –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–æ–Ω–æ–≤, –¥–∞—Ç—ã –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Å–∏–ª—É, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏ —Ç.–¥.
        5. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —è–∑—ã–∫, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π —à–∏—Ä–æ–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.
        6. –í—ã–¥–µ–ª—è–π –ø–æ–ª—É–∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º (—á–µ—Ä–µ–∑ **) –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã, –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–∫–æ–Ω–æ–≤ –∏ –≤–∞–∂–Ω—ã–µ –¥–∞—Ç—ã.
        7. –ü—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç–æ–≤ —É–∫–∞–∑—ã–≤–∞–π –∏—Ö —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.
        8. –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ markdown-—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [—Ç–µ–∫—Å—Ç](—Å—Å—ã–ª–∫–∞). –ù–ï –î–£–ë–õ–ò–†–£–ô —Å—Å—ã–ª–∫–∏ –≤ –ø—Ä–æ—Å—Ç–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ.
        9. –î–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –∏–ª–∏ –≤–∞–∂–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã/—ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (üìù, ‚öñÔ∏è, üìú, ‚úèÔ∏è –∏ —Ç.–¥.)
        10. –û–±—ä–µ–º: 3-5 —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã—Ö –∞–±–∑–∞—Ü–µ–≤.
        """
        
        try:
            response = self.llm_model.generate(prompt, max_tokens=1000)
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å—Å—ã–ª–æ–∫
            cleaned_response = self._clean_text_with_links(response)
            return cleaned_response
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}': {str(e)}")
            return f"–ó–∞ –¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏."

    def _generate_digest_intro(self, date, total_messages, categories_count, is_brief=True):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–≤–æ–¥–Ω–æ–π —á–∞—Å—Ç–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        
        Args:
            date (datetime): –î–∞—Ç–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            total_messages (int): –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            categories_count (dict): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            is_brief (bool): –ü—Ä–∏–∑–Ω–∞–∫ –∫—Ä–∞—Ç–∫–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            
        Returns:
            str: –¢–µ–∫—Å—Ç –≤–≤–æ–¥–Ω–æ–π —á–∞—Å—Ç–∏
        """
        formatted_date = date.strftime("%d.%m.%Y")
        categories_info = "\n".join([f"- {cat}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π" for cat, count in categories_count.items() if count > 0])
        
        prompt = f"""
        –ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∫ {"–∫—Ä–∞—Ç–∫–æ–º—É" if is_brief else "–ø–æ–¥—Ä–æ–±–Ω–æ–º—É"} –¥–∞–π–¥–∂–µ—Å—Ç—É –ø—Ä–∞–≤–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {formatted_date}.
        
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:
        - –î–∞—Ç–∞: {formatted_date}
        - –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
        - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
        {categories_info}
        
        –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º (1-2 –∞–±–∑–∞—Ü–∞) –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±—â—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.
        {"–£–ø–æ–º—è–Ω–∏, —á—Ç–æ —ç—Ç–æ –∫—Ä–∞—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è, –∏ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–∞–º." if is_brief else "–£–ø–æ–º—è–Ω–∏, —á—Ç–æ —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞."}
        """
        
        try:
            response = self.llm_model.generate(prompt, max_tokens=300)
            return response
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –∫ –¥–∞–π–¥–∂–µ—Å—Ç—É: {str(e)}")
            intro_text = f"# –î–∞–π–¥–∂–µ—Å—Ç –ø—Ä–∞–≤–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {formatted_date}"
            if is_brief:
                intro_text += "\n\n*–ö—Ä–∞—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è. –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–∞–º.*"
            else:
                intro_text += "\n\n*–ü–æ–¥—Ä–æ–±–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞.*"
            return intro_text

    def create_digest(self, date=None, days_back=1, digest_type="both"):
        """
        –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
        
        Args:
            date (datetime, optional): –î–∞—Ç–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è)
            days_back (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            digest_type (str): –¢–∏–ø –¥–∞–π–¥–∂–µ—Å—Ç–∞: "brief" (–∫—Ä–∞—Ç–∫–∏–π), "detailed" (–ø–æ–¥—Ä–æ–±–Ω—ã–π), "both" (–æ–±–∞)
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã
        end_date = date or datetime.now()
        start_date = end_date - timedelta(days=days_back)
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%Y-%m-%d')} –ø–æ {end_date.strftime('%Y-%m-%d')}, —Ç–∏–ø: {digest_type}")
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_messages = 0
        categories_count = {category: 0 for category in CATEGORIES}
        categories_count["–¥—Ä—É–≥–æ–µ"] = 0
        
        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–∫—Ü–∏–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        brief_sections = {}
        detailed_sections = {}
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (—á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –∏—Ö –¥–≤–∞–∂–¥—ã)
        messages_by_category = {}
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category in CATEGORIES + ["–¥—Ä—É–≥–æ–µ"]:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            messages = self.db_manager.get_messages_by_date_range(
                start_date=start_date,
                end_date=end_date,
                category=category
            )
            
            messages_by_category[category] = messages
            categories_count[category] = len(messages)
            total_messages += len(messages)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –æ–±–∑–æ—Ä—ã –Ω—É–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤
            if messages:
                if digest_type in ["brief", "both"]:
                    brief_sections[category] = self._generate_brief_section(category, messages)
                
                if digest_type in ["detailed", "both"]:
                    detailed_sections[category] = self._generate_detailed_section(category, messages)
        
        results = {
            "status": "success",
            "date": end_date.strftime("%Y-%m-%d"),
            "total_messages": total_messages,
            "categories": categories_count,
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if digest_type in ["brief", "both"]:
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–≤–æ–¥–Ω—É—é —á–∞—Å—Ç—å
                intro_text = self._generate_digest_intro(end_date, total_messages, categories_count, is_brief=True)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∫—Ä–∞—Ç–∫–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
                brief_text = f"{intro_text}\n\n"
                
                # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
                for category in CATEGORIES:
                    if category in brief_sections:
                        brief_text += f"{brief_sections[category]}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–¥—Ä—É–≥–æ–µ" –≤ –∫–æ–Ω–µ—Ü, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
                if "–¥—Ä—É–≥–æ–µ" in brief_sections:
                    brief_text += f"{brief_sections['–¥—Ä—É–≥–æ–µ']}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥—Ä–æ–±–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç, –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –æ–±–∞
                if digest_type == "both":
                    brief_text += "\n\n[–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç](/digest/detailed)\n"
                
                results["brief_digest_text"] = brief_text
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∞—Ç–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –≤ –ë–î
                try:
                    brief_result = self.db_manager.save_digest(
                        end_date, 
                        brief_text, 
                        brief_sections,
                        digest_type="brief"
                    )
                    results["brief_digest_id"] = brief_result["id"]
                    logger.info(f"–ö—Ä–∞—Ç–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω (ID: {brief_result['id']})")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}")
                    results["brief_error"] = str(e)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}")
                results["brief_error"] = str(e)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if digest_type in ["detailed", "both"]:
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–≤–æ–¥–Ω—É—é —á–∞—Å—Ç—å
                intro_text = self._generate_digest_intro(end_date, total_messages, categories_count, is_brief=False)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
                detailed_text = f"{intro_text}\n\n"
                
                # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
                for category in CATEGORIES:
                    if category in detailed_sections:
                        category_icon = self._add_category_icon(category)
                        detailed_text += f"## {category_icon} {category.upper()}\n\n{detailed_sections[category]}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–¥—Ä—É–≥–æ–µ" –≤ –∫–æ–Ω–µ—Ü, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
                if "–¥—Ä—É–≥–æ–µ" in detailed_sections:
                    category_icon = self._add_category_icon("–¥—Ä—É–≥–æ–µ")
                    detailed_text += f"## {category_icon} –î–†–£–ì–ò–ï –ù–û–í–û–°–¢–ò\n\n{detailed_sections['–¥—Ä—É–≥–æ–µ']}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫—Ä–∞—Ç–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç, –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –æ–±–∞
                if digest_type == "both":
                    detailed_text += "\n\n[–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ä–∞—Ç–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç](/digest/brief)\n"
                
                results["detailed_digest_text"] = detailed_text
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤ –ë–î
                try:
                    detailed_result = self.db_manager.save_digest(
                        end_date, 
                        detailed_text, 
                        detailed_sections,
                        digest_type="detailed"
                    )
                    results["detailed_digest_id"] = detailed_result["id"]
                    logger.info(f"–ü–æ–¥—Ä–æ–±–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω (ID: {detailed_result['id']})")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}")
                    results["detailed_error"] = str(e)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}")
                results["detailed_error"] = str(e)
        
        return results
    
    def create_task(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        
        Returns:
            Task: –ó–∞–¥–∞—á–∞ CrewAI
        """
        return Task(
            description="–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –ø—Ä–∞–≤–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å",
            agent=self.agent,
            expected_output="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"
        )