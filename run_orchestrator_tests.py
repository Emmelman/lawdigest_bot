#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""
import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(__file__))

from database.db_manager import DatabaseManager
from agents.orchestrator import OrchestratorAgent
from agents.agent_registry import AgentRegistry
from config.settings import DATABASE_URL

async def quick_integration_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    print("=" * 50)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        db_manager = DatabaseManager(DATABASE_URL)
        
        print("2. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤...")
        agent_registry = AgentRegistry(db_manager)
        
        print("3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        orchestrator = OrchestratorAgent(db_manager, agent_registry)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤
        print("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤...")
        agent_status = agent_registry.get_status()
        print(f"   –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: {agent_status['total_agents']}")
        
        for agent_name, status in agent_status["agents"].items():
            status_icon = "‚úÖ" if status["available"] else "‚ùå"
            print(f"   {status_icon} {agent_name}: {status['type']}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        print("5. –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        context = await orchestrator._analyze_current_state()
        
        print(f"   –ù–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {context.get('unanalyzed_count', 0)}")
        print(f"   –° –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é: {context.get('low_confidence_count', 0)}")
        print(f"   –î–∞–π–¥–∂–µ—Å—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {context.get('today_digests_count', 0)}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
        print("6. –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...")
        plan = await orchestrator._create_execution_plan("daily_workflow", context)
        
        print(f"   –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞—á: {len(plan)}")
        for i, task in enumerate(plan, 1):
            deps_str = f" (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç: {', '.join(task.dependencies)})" if task.dependencies else ""
            print(f"   {i}. {task.task_type.value}{deps_str}")
        
        # –ü—Ä–æ–±–Ω—ã–π –∑–∞–ø—É—Å–∫ (—Ç–æ–ª—å–∫–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
        print("7. –ü—Ä–æ–±–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
        result = await orchestrator.plan_and_execute("digest_only", 
                                                   date=datetime.now().date(),
                                                   days_back=1)
        
        print(f"   –°—Ç–∞—Ç—É—Å: {result.get('status')}")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.get('metrics', {}).get('total_execution_time', 0):.1f}—Å")
        
        summary = result.get('summary', {})
        if summary.get('created_digests'):
            print(f"   –°–æ–∑–¥–∞–Ω—ã –¥–∞–π–¥–∂–µ—Å—Ç—ã: {', '.join(summary['created_digests'])}")
        
        print("\n‚úÖ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

async def performance_test():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüèÉ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 30)
    
    try:
        db_manager = DatabaseManager(DATABASE_URL)
        agent_registry = AgentRegistry(db_manager)
        orchestrator = OrchestratorAgent(db_manager, agent_registry)
        
        scenarios = [
            ("urgent_update", "–°—Ä–æ—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"),
            ("daily_workflow", "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å"),
            ("digest_only", "–¢–æ–ª—å–∫–æ –¥–∞–π–¥–∂–µ—Å—Ç")
        ]
        
        for scenario, description in scenarios:
            print(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {description}")
            start_time = datetime.now()
            
            try:
                result = await orchestrator.plan_and_execute(scenario, days_back=1)
                execution_time = (datetime.now() - start_time).total_seconds()
                
                metrics = result.get('metrics', {})
                print(f"  ‚è±Ô∏è  –í—Ä–µ–º—è: {execution_time:.1f}—Å")
                print(f"  üìä –ó–∞–¥–∞—á: {metrics.get('total_tasks', 0)}")
                print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {metrics.get('success_rate', 0):.1%}")
                print(f"  üìà –°—Ç–∞—Ç—É—Å: {result.get('status')}")
                
            except Exception as e:
                execution_time = (datetime.now() - start_time).total_seconds()
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞ {execution_time:.1f}—Å: {e}")
        
        print("\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False

def connectivity_test():
   """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
   print("\nüîå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
   print("=" * 25)
   
   try:
       # –¢–µ—Å—Ç –ë–î
       print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...")
       db_manager = DatabaseManager(DATABASE_URL)
       
       # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
       unanalyzed = db_manager.get_unanalyzed_messages(limit=1)
       print(f"  ‚úÖ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–∞–π–¥–µ–Ω–æ {len(unanalyzed)} –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)")
       
       # –¢–µ—Å—Ç LLM –º–æ–¥–µ–ª–µ–π
       print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM –º–æ–¥–µ–ª–µ–π...")
       try:
           from llm.qwen_model import QwenLLM
           from llm.gemma_model import GemmaLLM
           
           qwen = QwenLLM()
           gemma = GemmaLLM()
           print("  ‚úÖ LLM –º–æ–¥–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
           
       except Exception as e:
           print(f"  ‚ö†Ô∏è  LLM –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
       
       # –¢–µ—Å—Ç Telegram (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
       print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram...")
       from config.settings import TELEGRAM_API_ID, TELEGRAM_API_HASH, TELEGRAM_CHANNELS
       
       if TELEGRAM_API_ID and TELEGRAM_API_HASH:
           print(f"  ‚úÖ API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–π–¥–µ–Ω—ã")
           print(f"  üì∫ –ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {len(TELEGRAM_CHANNELS)}")
       else:
           print("  ‚ö†Ô∏è  API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
       
       print("\n‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω!")
       return True
       
   except Exception as e:
       print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
       return False

async def main():
   """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
   print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–†–ö–ï–°–¢–†–ê–¢–û–†–ê")
   print("=" * 55)
   print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
   print()
   
   # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
   tests = [
       ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è", connectivity_test, False),  # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
       ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", quick_integration_test, True),  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
       ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", performance_test, True),  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
   ]
   
   results = []
   
   for test_name, test_func, is_async in tests:
       print(f"\n{'='*20} {test_name.upper()} {'='*20}")
       
       try:
           if is_async:
               result = await test_func()
           else:
               result = test_func()
           
           results.append((test_name, result))
           
       except Exception as e:
           print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
           results.append((test_name, False))
   
   # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
   print(f"\n{'='*20} –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ {'='*20}")
   
   passed = 0
   total = len(results)
   
   for test_name, result in results:
       status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
       print(f"{test_name:.<20} {status}")
       if result:
           passed += 1
   
   print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
   
   if passed == total:
       print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
       return 0
   else:
       print("‚ö†Ô∏è  –ù–ï –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫.")
       return 1

if __name__ == "__main__":
   try:
       exit_code = asyncio.run(main())
       sys.exit(exit_code)
   except KeyboardInterrupt:
       print("\n\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
       sys.exit(1)
   except Exception as e:
       print(f"\n\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
       import traceback
       traceback.print_exc()
       sys.exit(1)
