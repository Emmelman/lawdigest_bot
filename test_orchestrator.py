import asyncio
from database.db_manager import DatabaseManager
from agents.agent_registry import AgentRegistry
from agents.orchestrator import OrchestratorAgent
from config.settings import DATABASE_URL

async def test_orchestrator():
    try:
        print('üé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        db = DatabaseManager(DATABASE_URL)
        registry = AgentRegistry(db)
        orchestrator = OrchestratorAgent(db, registry)
        print('‚úÖ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        
        # –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        print('üîç –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...')
        context = await orchestrator._analyze_current_state()
        
        print(f'üìä –ù–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {context.get("unanalyzed_count", 0)}')
        print(f'üìä –° –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é: {context.get("low_confidence_count", 0)}')
        print(f'üìä –î–∞–π–¥–∂–µ—Å—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {context.get("today_digests_count", 0)}')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
        print('üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...')
        plan = await orchestrator._create_execution_plan("daily_workflow", context)
        
        print(f'üìù –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞—á: {len(plan)}')
        for i, task in enumerate(plan, 1):
            deps = f' (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç: {", ".join(task.dependencies)})' if task.dependencies else ''
            print(f'  {i}. {task.task_type.value}{deps}')
        
        print('‚úÖ –¢–µ—Å—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
        return True
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}')
        import traceback
        traceback.print_exc()
        return False

if __name__ == '__main__':
    result = asyncio.run(test_orchestrator())
    if result:
        print('\nüéâ –í–°–ï –ë–ê–ó–û–í–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!')
    else:
        print('\nüí• –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è')