#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤
"""

import sys
import os
import logging
from datetime import datetime
from unittest.mock import Mock, MagicMock
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_cross_agent_collaboration():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
    print("ü§ù –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CROSS-AGENT COLLABORATION")
    print("=" * 70)
    
    try:
        from agents.collaborative_crew import CollaborativeCrew
        from agents.agent_registry import AgentRegistry
        from database.db_manager import DatabaseManager
        from config.settings import DATABASE_URL
        
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        db_manager = DatabaseManager(DATABASE_URL)
        agent_registry = AgentRegistry(db_manager)
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏
        collaborative_crew = CollaborativeCrew(agent_registry)
        
        # –í–∫–ª—é—á–∞–µ–º debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logging.getLogger('agents.collaborative_crew').setLevel(logging.INFO)
        
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏...")
        
        # –¢–ï–°–¢ 1: –ö–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ–≥–æ —Å–ª—É—á–∞—è
        print(f"\nü§ù –¢–ï–°–¢ 1: –ö–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è")
        
        test_message = "–ö–æ–º–∏—Ç–µ—Ç –ì–æ—Å–¥—É–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª –ø—Ä–∏–Ω—è—Ç—å –≤ –ø–µ—Ä–≤–æ–º —á—Ç–µ–Ω–∏–∏ –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç –æ –≤–Ω–µ—Å–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω '–û –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ'"
        
        collaboration_result = await collaborative_crew.collaborate_on_difficult_categorization(
            message_id=999,
            message_text=test_message,
            initial_category="–¥—Ä—É–≥–æ–µ",
            confidence=2.0
        )
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏:")
        print(f"  –°—Ç–∞—Ç—É—Å: {collaboration_result.get('status')}")
        print(f"  –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {collaboration_result.get('final_category')}")
        print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {collaboration_result.get('final_confidence', 0):.1f}/5")
        print(f"  –°–∏–ª–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {collaboration_result.get('consensus_strength', 0):.0%}")
        
        categorization_success = (
            collaboration_result.get('status') == 'success' and
            collaboration_result.get('final_category') is not None and
            collaboration_result.get('final_confidence', 0) > 0
        )
        
        # –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        print(f"\nüìã –¢–ï–°–¢ 2: –ö–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞")
        
        test_digest_content = {
            "brief": "–ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –ø—Ä–∞–≤–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è...",
            "detailed": "–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤—ã—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤..."
        }
        
        quality_result = await collaborative_crew.collaborate_on_quality_assurance(
            digest_content=test_digest_content,
            digest_type="both",
            categories_data={}
        )
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:")
        print(f"  –°—Ç–∞—Ç—É—Å: {quality_result.get('status')}")
        print(f"  –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {quality_result.get('overall_score', 0):.1f}/5")
        print(f"  –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {quality_result.get('component_scores', {})}")
        
        quality_success = (
            quality_result.get('status') == 'success' and
            quality_result.get('overall_score', 0) > 0
        )
        
        # –¢–ï–°–¢ 3: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print(f"\nüî¨ –¢–ï–°–¢ 3: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        
        comprehensive_result = await collaborative_crew.collaborate_on_comprehensive_analysis(
            period_start=datetime.now(),
            period_end=datetime.now()
        )
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"  –°—Ç–∞—Ç—É—Å: {comprehensive_result.get('status')}")
        print(f"  –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ: {comprehensive_result.get('summary', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
        
        comprehensive_success = comprehensive_result.get('status') == 'success'
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        print("=" * 70)
        
        tests_results = [
            ("–ö–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è", categorization_success),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞", quality_success),
            ("–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", comprehensive_success)
        ]
        
        successful_tests = sum(1 for _, success in tests_results if success)
        total_tests = len(tests_results)
        
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}/{total_tests}")
        
        for test_name, success in tests_results:
            status_icon = "‚úÖ" if success else "‚ùå"
            print(f"{status_icon} {test_name}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏
        history_count = len(collaborative_crew.collaboration_history)
        print(f"üìú –ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏: {history_count}")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        if successful_tests >= 2:
            print(f"\nüéâ CROSS-AGENT COLLABORATION –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!")
            print(f"‚úÖ –ö–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç")
            print(f"‚úÖ –ê–≥–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç")
            print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ –≤–µ–¥–µ—Ç—Å—è")
            return True
        else:
            print(f"\n‚ö†Ô∏è CROSS-AGENT COLLABORATION –†–ê–ë–û–¢–ê–ï–¢ –ß–ê–°–¢–ò–ß–ù–û")
            print(f"‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
            return False
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {str(e)}", exc_info=True)
        return False

async def test_orchestrator_collaboration_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä"""
    print(f"\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í –û–†–ö–ï–°–¢–†–ê–¢–û–†")
    print("=" * 70)
    
    try:
        from agents.orchestrator import IntelligentOrchestratorAgent
        from agents.agent_registry import AgentRegistry
        from database.db_manager import DatabaseManager
        from config.settings import DATABASE_URL
        import inspect
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–µ
        required_methods = [
            '_execute_task_with_collaboration',
            '_should_use_collaboration',
            '_perform_task_collaboration'
        ]
        
        found_methods = []
        for method_name in required_methods:
            if hasattr(IntelligentOrchestratorAgent, method_name):
                found_methods.append(method_name)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥: {method_name}")
            else:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥: {method_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–µ–π
        db_manager = DatabaseManager(DATABASE_URL)
        agent_registry = AgentRegistry(db_manager)
        orchestrator = IntelligentOrchestratorAgent(db_manager, agent_registry)
        
        has_collaborative_crew = hasattr(orchestrator, 'collaborative_crew') and orchestrator.collaborative_crew is not None
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {'–î–∞' if has_collaborative_crew else '–ù–µ—Ç'}")
        
        integration_score = len(found_methods) + (1 if has_collaborative_crew else 0)
        max_score = len(required_methods) + 1
        
        print(f"\nüìä –û—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {integration_score}/{max_score}")
        
        if integration_score >= max_score - 1:
            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–∞")
            return True
        else:
            print("‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ –Ω–µ–ø–æ–ª–Ω–∞—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {str(e)}")
        return False

async def main():
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø CROSS-AGENT COLLABORATION")
    print()
    
    # –¢–µ—Å—Ç –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤
    collaboration_ok = await test_cross_agent_collaboration()
    
    # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    integration_ok = await test_orchestrator_collaboration_integration()
    
    print(f"\n" + "=" * 70)
    if collaboration_ok and integration_ok:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ CROSS-AGENT COLLABORATION –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –ö–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–∞")
        print()
        print("üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ")
        print("3. –°–∏—Å—Ç–µ–º–∞ Enhanced reasoning –≥–æ—Ç–æ–≤–∞!")
    else:
        print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–• –ò–õ–ò –ü–†–û–ë–õ–ï–ú–´")
        if not collaboration_ok:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏")
        if not integration_ok:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä")
    
    print(f"\nüéä –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í—Å–µ 4 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Enhanced reasoning —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã:")
    print("   ‚úÖ Enhanced Analyzer reasoning")
    print("   ‚úÖ Enhanced Critic multi-perspective analysis")
    print("   ‚úÖ Enhanced Digester strategic planning")
    print("   ‚úÖ Cross-agent collaboration")

if __name__ == "__main__":
    asyncio.run(main())
